{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Auth0 AppSync React \u30cf\u30f3\u30ba\u30aa\u30f3 \u3053\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u306f\uff0c Auth0 , AppSync , React \u3092\u4f7f\u3063\u3066\uff0cSPA\u306b\u3088\u308b\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3068\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u306a\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306e\u958b\u767a\u3092\u4f53\u9a13\u3057\u3066\u9802\u304f\u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u3059\uff0e","title":"Auth0 AppSync React \u30cf\u30f3\u30ba\u30aa\u30f3"},{"location":"#auth0-appsync-react","text":"\u3053\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u306f\uff0c Auth0 , AppSync , React \u3092\u4f7f\u3063\u3066\uff0cSPA\u306b\u3088\u308b\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3068\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u306a\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306e\u958b\u767a\u3092\u4f53\u9a13\u3057\u3066\u9802\u304f\u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u3059\uff0e","title":"Auth0 AppSync React \u30cf\u30f3\u30ba\u30aa\u30f3"},{"location":"hands-on/react/react/","text":"React\u3067\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u3092\u69cb\u7bc9\u3059\u308b \u4f5c\u6210\u3057\u305fAppSync\u306b\u3092\u5229\u7528\u3059\u308b\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 React \u3067\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff0e Create React App\u3092\u4f7f\u3063\u3066\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b Create React App\uff08CRA\uff09\u3092\u4f7f\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3057\u307e\u3059\uff0e\u4efb\u610f\u306e\u4f5c\u696d\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u5f8c\u3001\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e npx create-react-app@3.4.1 --template typescript react-appsync-protected-by-auth0 cd react-appsync-protected-by-auth0 React Router\u3068Auth0\u306eSPA\u7528SDK\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e yarn add react-router-dom@5.1.2 @auth0/auth0-spa-js@1.8.1 yarn add -D @types/react-router-dom@5.1.2 Auth0\u3092React\u3067\u5229\u7528\u3059\u308b\u70ba\u306eCustom Hook\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e // ./src/react-auth0-spa.tsx import React from 'react' ; import createAuth0Client , { Auth0Client , Auth0ClientOptions , getIdTokenClaimsOptions , GetTokenSilentlyOptions , GetTokenWithPopupOptions , IdToken , LogoutOptions , PopupConfigOptions , PopupLoginOptions , RedirectLoginOptions , } from '@auth0/auth0-spa-js' ; type Auth0ContextOptions = { isAuthenticated : boolean ; user : any ; loading : boolean ; popupOpen : boolean ; loginWithPopup : ( options? : PopupLoginOptions , config? : PopupConfigOptions ) => Promise < void > ; handleRedirectCallback : ( path? : string ) => Promise < void > ; getIdTokenClaims : ( options? : getIdTokenClaimsOptions ) => Promise < IdToken > ; loginWithRedirect : ( options? : RedirectLoginOptions ) => Promise < void > ; getTokenSilently : ( options? : GetTokenSilentlyOptions ) => Promise < any > ; getTokenWithPopup : ( options? : GetTokenWithPopupOptions , config? : PopupConfigOptions ) => Promise < string > ; logout : ( options? : LogoutOptions ) => void ; } export type Auth0ProviderOptions = Auth0ClientOptions & { children : React.ReactElement ; onRedirectCallback : Auth0ContextOptions [ 'handleRedirectCallback' ]; } export const Auth0Context = React . createContext ({} as Auth0ContextOptions ); export const useAuth0 = () => React . useContext < Auth0ContextOptions > ( Auth0Context ); export const Auth0Provider : React.FC < Auth0ProviderOptions > = ( { children , onRedirectCallback , ... initOptions } ) => { const [ isAuthenticated , setIsAuthenticated ] = React . useState < boolean > ( false ); const [ user , setUser ] = React . useState < any > ( null ); const [ auth0Client , setAuth0 ] = React . useState < Auth0Client > (); const [ loading , setLoading ] = React . useState < boolean > ( true ); const [ popupOpen , setPopupOpen ] = React . useState < boolean > ( false ); React . useEffect (() => { const initAuth0 = async () => { const auth0FromHook = await createAuth0Client ( initOptions ); setAuth0 ( auth0FromHook ); if ( window . location . search . includes ( 'code=' ) && window . location . search . includes ( 'state=' )) { const { appState } = await auth0FromHook . handleRedirectCallback (); await onRedirectCallback ( appState ? . targetUrl ); } const isAuthenticated = await auth0FromHook . isAuthenticated (); setIsAuthenticated ( isAuthenticated ); if ( isAuthenticated ) { const user = await auth0FromHook . getUser (); setUser ( user ); } setLoading ( false ); }; initAuth0 (); // eslint-disable-next-line }, []); const loginWithPopup : Auth0ContextOptions [ 'loginWithPopup' ] = async ( options , config ) => { setPopupOpen ( true ); try { await auth0Client ! . loginWithPopup ( options , config ); } catch ( error ) { console . error ( error ); } finally { setPopupOpen ( false ); } const user = await auth0Client ! . getUser (); setUser ( user ); setIsAuthenticated ( true ); }; const handleRedirectCallback : Auth0ContextOptions [ 'handleRedirectCallback' ] = async ( url ) => { setLoading ( true ); await auth0Client ! . handleRedirectCallback ( url ); const user = await auth0Client ! . getUser (); setLoading ( false ); setIsAuthenticated ( true ); setUser ( user ); }; return ( < Auth0Context . Provider value = {{ isAuthenticated , user , loading , popupOpen , loginWithPopup , handleRedirectCallback , getIdTokenClaims : ( options ) => auth0Client ! . getIdTokenClaims ( options ), loginWithRedirect : ( options ) => auth0Client ! . loginWithRedirect ( options ), getTokenSilently : ( options ) => auth0Client ! . getTokenSilently ( options ), getTokenWithPopup : ( options , config ) => auth0Client ! . getTokenWithPopup ( options , config ), logout : ( options ) => auth0Client ! . logout ( options ) }} > { children } < /Auth0Context.Provider> ); }; \u30ed\u30b0\u30a4\u30f3\uff0f\u30ed\u30b0\u30a2\u30a6\u30c8\u64cd\u4f5c\u3092\u884c\u308f\u305b\u308b\u70ba\u306bNavBar\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e // ./src/components/NavBar.tsx import React from \"react\" ; import { useAuth0 } from \"../react-auth0-spa\" ; export const NavBar = () => { const { isAuthenticated , loginWithRedirect , logout } = useAuth0 (); return ( < div > { ! isAuthenticated && ( < button onClick = {() => loginWithRedirect ({})} > Log in < /button> )} { isAuthenticated && < button onClick = {() => logout ()} > Log out < /button>} < /div> ); }; history\u3092\u751f\u6210\u3057\u3001\u3069\u3053\u304b\u3089\u3067\u3082\u30a2\u30af\u30bb\u30b9\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e TODO: \u3053\u306e\u90e8\u5206\u306e\u8aac\u660e\u304c\u602a\u3057\u3044 useHistory() Hook\u3092\u4f7f\u308f\u305a\u306b\u3001createBrowserHistory()\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u524d\u8005\u306fRoute\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u914d\u4e0b\u3067\u3057\u304b\u4f7f\u3048\u306a\u3044\u304c\u3001\u5f8c\u8005\u306f\u3069\u3053\u3067\u3082\u4f7f\u3048\u308b\uff08\u5c11\u306a\u304f\u3068\u3082push\u306e\u5b9a\u7fa9\u306f\u51fa\u6765\u308b\uff09\u304b\u3089\u3067\u3059\uff0e import { createBrowserHistory } from \"history\" ; export const history = createBrowserHistory (); Auth0\u306e\u8a2d\u5b9a\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u53d6\u308a\u8fbc\u3081\u308b\u3088\u3046\u306bJSON\u5f62\u5f0f\u3067\u4fdd\u5b58\u3057\u307e\u3059\uff0e\u5148\u7a0b\u4f5c\u6210\u3057\u305f\u3001Auth0\u306eApplication\u5b9a\u7fa9\u306eSettings\u30bf\u30d6\u304b\u3089Domain\u3068Client ID\u3092\u8ee2\u8a18\u3057\u3066\u304f\u3060\u3055\u3044\uff0e \u4eca\u56de\u306f\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306a\u306e\u3067\u3001\u74b0\u5883\uff08dev/stg/prd\uff09\u5dee\u5206\u3092\u8003\u616e\u305b\u305a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u30cf\u30fc\u30c9\u30b3\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\uff0e # ./src/auth-config.json { \"domain\" : \"YOUR_DOMAIN\" , \"clientId\" : \"YOUR_CLIENT_ID\" } \u4f5c\u6210\u3057\u305fAuth0 Custom Hook\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d50\u5408\u3055\u305b\u308b\u70ba\u306b\u3001 index.tsx \u3092\u7de8\u96c6\u3057\u307e\u3059\uff0e // ./src/index.tsx import React from 'react' ; import ReactDOM from 'react-dom' ; import { App } from './App' ; import * as serviceWorker from './serviceWorker' ; import { history } from './utils/history' ; import { Auth0Provider } from \"./react-auth0-spa\" ; import config from \"./auth_config.json\" ; const onRedirectCallback = async ( url? : string ) => { history . push ( url ?? window . location . pathname ); }; ReactDOM . render ( < React . StrictMode > < Auth0Provider domain = { config . domain } client_id = { config . clientId } redirect_uri = { window . location . origin } onRedirectCallback = { onRedirectCallback } > < App /> < /Auth0Provider> < /React.StrictMode>, document . getElementById ( 'root' ) ); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker . unregister (); CRA\u3067\u751f\u6210\u3055\u308c\u305fCSS\u7b49\u4f7f\u308f\u306a\u3044\u306e\u3067\u524a\u9664\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\uff0e logo.svg index.tsx index.css App.css App.test.tsx \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3066\u3001\u30ed\u30b0\u30a4\u30f3\u304c\u51fa\u6765\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\uff0e \u307e\u305a\u3001\u30c6\u30b9\u30c8\u7528\u306e\u30e6\u30fc\u30b6\u30fc\u3092Auth0\u306b\u4f5c\u6210\u3057\u307e\u3059\uff0eAuth0\u306eDashbord\u3092\u958b\u304d\u3001 Users & Roles \u3001 Users \u3068\u30e1\u30cb\u30e5\u30fc\u3092\u9078\u629e\u3057\u3001 CREATE USER \u3092\u9078\u629e\u3057\u307e\u3059\uff0e \u30e6\u30fc\u30b6\u30fc\u306eEmail\u3068Password\u3092\u5165\u529b\u3057\u3001 CREATE \u3092\u9078\u629e\u3057\u307e\u3059\uff0e \u30d9\u30ea\u30d5\u30a1\u30a4\u306e\u30e1\u30fc\u30eb\u304c\u5c4a\u304f\u306e\u3067\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u4f7f\u7528\u53ef\u80fd\u306a\u72b6\u614b\u306b\u9077\u79fb\u3055\u305b\u307e\u3059\uff0e \u30e6\u30fc\u30b6\u30fc\u306e\u6e96\u5099\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u30ed\u30b0\u30a4\u30f3\u304c\u884c\u3048\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\uff0e\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30d6\u30e9\u30a6\u30b6\u3067 http://loclahost:3000 \u304c\u958b\u304d\u307e\u3059\uff0e\u81ea\u52d5\u3067\u30d6\u30e9\u30a6\u30b6\u304c\u958b\u304b\u306a\u3044\u5834\u5408\u306f\u624b\u52d5\u3067URL\u3092\u5165\u529b\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u3060\u3055\u3044\uff0e yarn start \u30d6\u30e9\u30a6\u30b6\u3067\u7d20\u6734\u306a\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001Log in\u30dc\u30bf\u30f3\u3092\u9078\u629e\u3057\u307e\u3059\uff0e Auth0\u306e\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u30e6\u30fc\u30b6\u30fc\u306eEmail\u3068Password\u3092\u5165\u529b\u3057\u3001 LOG IN \u3092\u9078\u629e\u3057\u307e\u3059\uff0e \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3059\u308b\u8a8d\u53ef\u3092\u78ba\u8a8d\u3055\u308c\u308b\u306e\u3067\u30c1\u30a7\u30c3\u30af\u30a2\u30a4\u30b3\u30f3\u3092\u9078\u629e\u3057\u307e\u3059\uff0e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u30a2\u30a4\u30b3\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u306d\uff0e \u4e00\u77ac\u3001 Loading... \u3068\u8868\u793a\u3055\u308c\u305f\u5f8c\u306b\u3001 Log out \u30dc\u30bf\u30f3\u3060\u3051\u306e\u7d20\u6734\u306a\u753b\u9762\u306b\u623b\u308c\u3070\u6210\u529f\u3067\u3059\uff0e Log out \u3092\u9078\u629e\u3057\u3066\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\uff0e\u4ee5\u964d\u3082\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7de8\u96c6\u3059\u308b\u524d\u306b\u306f\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u304b\u3089\u884c\u3044\u307e\u3059\uff0e\u7279\u306b\u5f8c\u307b\u3069 audience \u3092\u8a2d\u5b9a\u3059\u308b\u969b\u306b\u306f\u4e8b\u524d\u306b\u30ed\u30b0\u30a2\u30a6\u30c8\u304c\u5fc5\u9808\u3067\u3059\uff0e \u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u753b\u9762\u306b\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u8868\u793a\u3059\u308b Token \u306e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u753b\u9762\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e Token \u304b\u3089\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u306e\u3067\u30ed\u30b0\u30a4\u30f3\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u70ba\u306b\u3001\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3051\u308c\u3070Auth0\u306e\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u3078\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308bPrivate Route\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e \u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u753b\u9762\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0eAuth0 Custom Hook\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3001\u8868\u793a\u3057\u307e\u3059\uff0e // ./src/components/Profile.tsx import React from \"react\" ; import { useAuth0 } from \"../react-auth0-spa\" ; export const Profile = () => { const { loading , user } = useAuth0 (); if ( loading || ! user ) { return < div > Loading ... < /div>; } return ( <> < img src = { user . picture } alt = \"Profile\" /> < h2 > { user . name } < /h2> < p > { user . email } < /p> < code > { JSON . stringify ( user , null , 2 )} < /code> < /> ); }; NavBar.tsx \u3092\u5909\u66f4\u3057\u3001Profile\u753b\u9762\u306b\u79fb\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e // ./ src / components / NavBar . tsx import React from 'react' ; import { useAuth0 } from '../react-auth0-spa' ; import { Link } from 'react-router-dom' ; export const NavBar = () => { const { isAuthenticated , loginWithRedirect , logout } = useAuth0 (); return ( < div > { ! isAuthenticated && ( < button onClick = {() => loginWithRedirect ()} > Log in </ button > )} { isAuthenticated && ( <> < button onClick = {() => logout ()} > Log out </ button > < span > < Link to = \"/\" > Home </ Link > | < Link to = \"/profile\" > Profile </ Link > </ span > </> )} </ div > ); }; App.tsx \u3092\u5909\u66f4\u3057Profile\u753b\u9762\u3078\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff0e // ./src/App.tsx import React from \"react\" ; import { NavBar } from \"./components/NavBar\" ; import { Router , Route , Switch } from \"react-router-dom\" ; import { Profile } from \"./components/Profile\" ; import { history } from \"./utils/history\" ; export const App = () => { return ( < div className = \"App\" > < Router history = { history } > < header > < NavBar /> < /header> < Switch > < Route path = \"/\" exact /> < Route path = \"/profile\" component = { Profile } /> < /Switch> < /Router> < /div> ); }; \u307e\u3060\u3001\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4e0b\u8a18\u306eURL\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068Loading\u72b6\u614b\u306e\u307e\u307e\u9077\u79fb\u3057\u307e\u305b\u3093\uff0e http://localhost:3000/profile Private Route \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\u3053\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f React Router\u306eRoute\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306eWrapper\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u307e\u3059\uff0e // ./src/components/PrivateRoute.tsx import React from 'react' ; import { Route , RouteProps } from 'react-router-dom' ; import { useAuth0 } from '../react-auth0-spa' ; export const PrivateRoute : React.FC < RouteProps > = ({ component : Component , path , ... rest }) => { const { loading , isAuthenticated , loginWithRedirect } = useAuth0 (); React . useEffect (() => { if ( loading || isAuthenticated ) { return ; } const fn = async () => { await loginWithRedirect ({ appState : { targetUrl : window.location.pathname } }); }; fn (); }, [ loading , isAuthenticated , loginWithRedirect , path ]); const render : RouteProps [ 'render' ] = props => { if ( isAuthenticated && Component != null ) { return < Component {... props } /> ; } return null ; }; return < Route path = { path } render = { render } {... rest } /> ; }; App.tsx \u3092\u5909\u66f4\u3057\u3066\u3001Profile\u753b\u9762\u3092Private Route\u3067\u4fdd\u8b77\u3057\u307e\u3059\uff0e // ./src/App.tsx import React from \"react\" ; import { NavBar } from \"./components/NavBar\" ; import { Router , Route , Switch } from \"react-router-dom\" ; import { Profile } from \"./components/Profile\" ; import { history } from \"./utils/history\" ; import { PrivateRoute } from './components/PrivateRoute' ; export const App = () => { return ( < div className = \"App\" > < Router history = { history } > < header > < NavBar /> < /header> < Switch > < Route path = \"/\" exact /> < PrivateRoute path = \"/profile\" component = { Profile } /> < /Switch> < /Router> < /div> ); }; \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3066\u3001\u30ed\u30b0\u30a2\u30a6\u30c8\u72b6\u614b\u3067Profile\u753b\u9762\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\uff0e\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u72b6\u614b\u3067\u4e0b\u8a18\u306eURL\u3078\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\uff0e http://localhost:3000/profile Auth0\u306e\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u3078\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u308b\u306e\u3067\u3001Email\u3068Password\u3092\u5165\u529b\u3057\u307e\u3059\uff0e Profile\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff0e\u8868\u793a\u3092\u78ba\u8a8d\u3067\u304d\u305f\u3089\u3001\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\uff0e Schema\u306e\u53d6\u5f97\u3068\u578b\u3068Hooks\u3092\u751f\u6210\u3059\u308b AppSync Schema\uff08GraphQL Schema\uff09\u304b\u3089\u578b\u3068React Custom Hook\u3092\u751f\u6210\u3057\u307e\u3059\uff0e \u4e00\u5ea6\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u3057\u307e\u3048\u3070\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067Schema\u3092\u5143\u306b\u4f55\u5ea6\u3067\u3082\u518d\u751f\u6210\u304c\u53ef\u80fd\u3067\u3059\uff0e AWS CLI\u3092\u4f7f\u3063\u3066Schema\u3092\u53d6\u5f97\u3057\u307e\u3059\uff0e\u5f53\u7136\u3067\u3059\u304cAppSync\u3060\u304b\u3089\u51fa\u6765\u308b\u65b9\u6cd5\u3067\u3059\b\uff0c\b\u305d\u308c\u4ee5\u5916\u3067GraphQL\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5bfe\u3057\u3066\u30b3\u30fc\u30c9\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u304c\u76f4\u63a5Schema\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\uff0e\u3082\u3061\u308d\u3093\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066Schema\u3092\u5171\u6709\u3057\u3066\u3082\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\uff0e AWS CLI\u3092\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\uff0c\u4e0b\u8a18\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\uff0e AWS CLI \u30d0\u30fc\u30b8\u30e7\u30f3 2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Schema\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\uff0cSchema\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff0e mkdir -p src/graphql && \\ aws appsync get-introspection-schema --api-id ${ APP_SYNC_API_ID } --format SDL --include-directives src/graphql/schema.graphql Documents\uff08\u30af\u30a8\u30ea\u3001\u30df\u30e5\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3001\u30b5\u30d6\u30b9\u30af\u30ea\u30d7\u30b7\u30e7\u30f3\u306e\u30ea\u30af\u30a8\u30b9\u30c8\uff09\u304c\u7121\u3044\u3068React Custom Hook\u306e\u751f\u6210\u306f\u884c\u3048\u306a\u3044\u306e\u3067\u3001Schema\u304b\u3089Documents\u3092\u751f\u6210\u3057\u307e\u3059\uff0e\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306bAmplify\u95a2\u9023\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306a\u306e\u3067\u3059\u304c\u3001\u30de\u30eb\u30c1\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u30d4\u30f3\u30dd\u30a4\u30f3\u30c8\u3067\u6b32\u3057\u3044\u90e8\u5206\u3060\u3051\u4f7f\u3048\u3066\u52a9\u304b\u308a\u307e\u3059\uff0e \u751f\u6210\u3055\u308c\u308bDocuments\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u5168\u3066\u306e\u9805\u76ee\u3092\u8981\u6c42\u3059\u308b\u70ba\u3001\u5fc5\u8981\u306a\u9805\u76ee\u3060\u3051\u53d6\u5f97\u3067\u304d\u308b\u3068\u3044\u3046GraphQL\u306e\u30e1\u30ea\u30c3\u30c8\u3092\u6bba\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u3053\u308c\u3092\u5acc\u3046\u5834\u5408\u306f\u3001\u624b\u52d5\u3067Documents\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff0e yarn add -D amplify-graphql-docs-generator@2.1.13 yarn amplify-graphql-docs-generator --schema src/graphql/schema.graphql --output src/graphql/all-operations.graphql --language graphql Schema\u3068Document\u304b\u3089\u578b\u3068React Custom Hook\u3092\u751f\u6210\u3057\u307e\u3059\uff0e \u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e yarn add \\ graphql@15.0.0 \\ @apollo/react-common@3.1.4 \\ @apollo/react-hooks@3.1.5 yarn add -D \\ @graphql-codegen/cli@1.13.5 \\ @graphql-codegen/typescript@1.13.5 \\ @graphql-codegen/typescript-operations@1.13.5 \\ @graphql-codegen/typescript-react-apollo@1.13.5 graphql-codegen\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e \u3053\u306e\u8a2d\u5b9a\u306b\u57fa\u3065\u3044\u3066\u578b\u3084Hook\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3001TypeScript\u306eEnum\u4f7f\u3044\u305f\u304f\u306a\u3044\u306e\u3067\u3001enumsAsTypes\u3092\u6709\u52b9\u306b\u3057\u3066Types\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\uff0e\u597d\u307f\u306b\u5408\u308f\u305b\u3066\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff0e typescript | GraphQL Code Generator # ./codegen.yml overwrite : true schema : - './src/graphql/schema.graphql' documents : - './src/graphql/all-operations.graphql' generates : src/graphql/generated.tsx : plugins : - 'typescript' - 'typescript-operations' - 'typescript-react-apollo' config : withComponent : false withHooks : true withHOC : false enumsAsTypes : true \u578b\u3068React Custom Hooks\u3092\u751f\u6210\u3057\u307e\u3059\uff0e yarn graphql-codegen --config codegen.yml Schema\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u7c21\u5358\u306b\u518d\u751f\u6210\u304c\u3067\u304d\u308b\u3088\u3046\u306b\uff0cnpm scripts\u3092\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\uff0e\u3053\u308c\u3067 yarn codegen \u3068\u3059\u308b\u4e8b\u3067\u518d\u751f\u6210\u304c\u884c\u306a\u3048\u307e\u3059\uff0e // ./package.json ..., \"scripts\" : { ... \"codegen:get-schema\" : \"aws appsync get-introspection-schema --api-id ${APP_SYNC_API_ID} --format SDL --include-directives src/graphql/schema.graphql\" , \"codegen:docsgen\" : \"amplify-graphql-docs-generator --schema src/graphql/schema.graphql --output src/graphql/all-operations.graphql --language graphql\" , \"codegen\" : \"yarn codegen:get-schema && yarn codegen:docsgen && graphql-codegen --config codegen.yml\" } , ... \u5404\u30af\u30a8\u30ea\u30fc\u3001\u30df\u30e5\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3001\u30b5\u30d6\u30b9\u30af\u30ea\u30d7\u30b7\u30e7\u30f3\u306b\u5bfe\u3059\u308bApollo Client\u306eReact Custom Hook\u304c\u751f\u6210\u3055\u308c\u307e\u3057\u305f\uff0eApollo Client\u306f\u304b\u306a\u308a\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30c8\u3067fetch more\u3084polling\u51e6\u7406\u306a\u3069\u304c\u5b9f\u88c5\u6e08\u307f\u3067\u3059\uff0e \u3053\u306e\u69d8\u306b\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3068\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3067\u578b\u3092\u5171\u6709\u3057\u3001\u3055\u3089\u306bAPI\u30a2\u30af\u30bb\u30b9\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u3092\u81ea\u52d5\u751f\u6210\u3067\u304d\u308b\u4e8b\u306f\u3001AppSync\uff08GraphQL\uff09\u4f7f\u3046\u975e\u5e38\u306b\u5927\u304d\u306a\u30e1\u30ea\u30c3\u30c8\u3067\u3059\u3002 \u53d6\u5f97\u30fb\u751f\u6210\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u4ed8\u9332\u306e\u7ae0\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e \u8a8d\u8a3c\u3092\u9023\u643a\u3057\u30af\u30a8\u30ea\u30fc\u3059\u308b Auth0\u304b\u3089Apollo Client\u3078Token\u306e\u53d7\u3051\u6e21\u3057\u3068\u3001\u751f\u6210\u3055\u308c\u305fReact Custom Hook\u3092\u4f7f\u3063\u3066\u3001CRUD\u64cd\u4f5c\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e yarn add \\ apollo-client@2.6.8 \\ apollo-cache-inmemory@1.6.5 \\ apollo-link-context@1.0.20 \\ apollo-link-http@1.5.17 \\ react-apollo@3.1.5 Auth0\u3068AppSync\u306e\u8a2d\u5b9a\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u53d6\u308a\u8fbc\u3081\u308b\u3088\u3046\u306bJSON\u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\uff06\u4f5c\u6210\u3057\u307e\u3059\uff0e auth-config.json \u306b audience \u3092\u8ffd\u52a0\u3057\u307e\u3059\uff0e // ./src/auth-config.json { \"domain\" : \"YOUR_DOMAIN\" , \"clientId\" : \"YOUR_CLIENT_ID\" , \"audience\" : \"YOUR_AUDIENCE\" } app-sync-config.json \u3092\u4f5c\u6210\u3057\u3001uri\u306bAppSync\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5165\u529b\u3057\u307e\u3059\uff0e // ./src/app-sync-cofig.json { \"uri\" : \"YOUR_API_URL\" } Auth0\u304b\u3089Token\u3092\u53d7\u3051\u53d6\u308a\u3001 authorization \u30d8\u30c3\u30c0\u30fc\u306b\u30bb\u30c3\u30c8\u3059\u308b ApolloProvider \u306e Wrapper \u3001 AuthorizedApolloProvider \u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e // ./src/authorized-apollo-client.tsx import React from 'react' ; import { useAuth0 } from './react-auth0-spa' ; import { HttpLink } from 'apollo-link-http' ; import appSyncConfig from './app-sync-config.json' ; import { setContext } from 'apollo-link-context' ; import { ApolloLink } from 'apollo-link' ; import { InMemoryCache } from 'apollo-cache-inmemory' ; import { ApolloClient } from 'apollo-client' ; import { ApolloProvider } from '@apollo/react-hooks' ; export const AuthorizedApolloProvider : React.FC = ({ children }) => { const [ token , setToken ] = React . useState < string > ( '' ); const { loading , getTokenSilently } = useAuth0 (); if ( loading ) { return < h1 > Loading ... < /h1>; } const httpLink = new HttpLink ({ uri : appSyncConfig.uri , fetchOptions : { credentials : 'same-origin' } }); const withTokenLink = setContext ( async () => { if ( token ) { return { auth0Token : token }; } const newToken = await getTokenSilently (); setToken ( newToken ); return { auth0Token : newToken }; }); const authLink = setContext (( _ , { headers , auth0Token }) => ({ headers : { ... headers , ...( auth0Token ? { authorization : auth0Token } : {}) } })); const client = new ApolloClient ({ link : ApolloLink.from ([ withTokenLink , authLink , httpLink ]), cache : new InMemoryCache () }); return ( < ApolloProvider client = { client } > { children } < /ApolloProvider> ); }; \u4f5c\u6210\u3057\u305f AuthorizedApolloProvider \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d71\u5408\u3057\u307e\u3059\uff0e\u5408\u308f\u305b\u3066\u3001 Auth0Provider \u306b audience \u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e // .src/index.tsx import React from 'react' ; import ReactDOM from 'react-dom' ; import { App } from './App' ; import * as serviceWorker from './serviceWorker' ; import { history } from './utils/history' ; import { Auth0Provider } from './react-auth0-spa' ; import authConfig from './auth-config.json' ; import { AuthorizedApolloProvider } from './authorized-apollo-client' ; const onRedirectCallback = async ( url? : string ) => { history . push ( url ?? window . location . pathname ); }; ReactDOM . render ( < React . StrictMode > < Auth0Provider domain = { authConfig . domain } client_id = { authConfig . clientId } redirect_uri = { window . location . origin } audience = { authConfig . audience } onRedirectCallback = { onRedirectCallback } > < AuthorizedApolloProvider > < App /> < /AuthorizedApolloProvider> < /Auth0Provider> < /React.StrictMode>, document . getElementById ( 'root' ) ); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker . unregister (); Events\u306b\u5bfe\u3057\u3066CRUD\u3059\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\u3068\u308a\u3042\u3048\u305a\u52d5\u3051\u3070\u826f\u3044\u306e\u3067Optimistic UI\u305b\u305a\u30ea\u30d5\u30a7\u30c3\u30c1\u3067\u6e08\u307e\u305b\u3066\u3044\u307e\u3059\uff0e // ./src/components/DemoTable.tsx import React from 'react' ; import { useCreateEventMutation , useDeleteEventMutation , useListEventsQuery } from '../graphql/generated' ; const limit = 100 ; export const DemoTable : React.FC = () => { const { data , refetch } = useListEventsQuery ({ variables : { limit }}); const [ addEvent ] = useCreateEventMutation (); const [ deleteData ] = useDeleteEventMutation (); const handleCreateClick = async () => { await addEvent ({ variables : { name : \"My First Event\" , when : \"Today\" , where : \"My House\" , description : \"Very first event\" , } }) // FIXME: \u30ea\u30d5\u30a7\u30c3\u30c1\u305b\u305a\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u66f8\u304d\u63db\u3048\u308b\u3079\u304d await refetch (); } const handleDeleteClick = async ( id? : string ) => { if ( id == null ) { return } await deleteData ({ variables : { id }}) // FIXME: \u30ea\u30d5\u30a7\u30c3\u30c1\u305b\u305a\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u66f8\u304d\u63db\u3048\u308b\u3079\u304d await refetch (); } return ( <> < h1 > Events 100 \u4ef6\u307e\u3067\u8868\u793a < /h1> < button onClick = {() => { handleCreateClick ()}} > \u4f5c\u6210\u3059\u308b < /button> < table > < thead > < tr > < th > ID < /th> < th > Name < /th> < th > Description < /th> < th > When < /th> < th > Where < /th> < /tr> < /thead> < tbody > { data ? . listEvents ? . items ? . map ( value => ( < tr key = { value ? . id } > < td > { value ? . id } < /td> < td > { value ? . name } < /td> < td > { value ? . description } < /td> < td > { value ? . when } < /td> < td > { value ? . where } < /td> < td >< button onClick = {() => { handleDeleteClick ( value ? . id )}} > \u524a\u9664\u3059\u308b < /button></td> < /tr> )) } < /tbody> < /table> < /> ); }; NavBar.tsx \u306b DemoTable \u3078\u306e\u30ea\u30f3\u30af\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e // ./src/components/NavBar import React from 'react' ; import { useAuth0 } from '../react-auth0-spa' ; import { Link } from 'react-router-dom' ; export const NavBar = () => { const { isAuthenticated , loginWithRedirect , logout } = useAuth0 (); return ( < div > { ! isAuthenticated && ( < button onClick = {() => loginWithRedirect ()} > Log in < /button> )} { isAuthenticated && ( <> < button onClick = {() => logout ()} > Log out < /button> < span > < Link to = \"/\" > Home < /Link> | <Link to=\"/profile\">Profile</Link> | <Link to=\"/demo-table\">Demo Table</Link> < /span> < /> )} < /div> ); }; \u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e // ./src/App.tsx import React from \"react\" ; import { NavBar } from \"./components/NavBar\" ; import { Router , Route , Switch } from \"react-router-dom\" ; import { Profile } from \"./components/Profile\" ; import { DemoTable } from \"./components/DemoTable\" ; import { history } from \"./utils/history\" ; import { PrivateRoute } from './components/PrivateRoute' ; export const App = () => { return ( < div className = \"App\" > < Router history = { history } > < header > < NavBar /> < /header> < Switch > < Route path = \"/\" exact /> < PrivateRoute path = \"/profile\" component = { Profile } /> < PrivateRoute path = \"/demo-table\" component = { DemoTable } /> < /Switch> < /Router> < /div> ); }; \u3053\u308c\u3067\u5b8c\u6210\u3067\u3059\uff0eDemo Table\u30da\u30fc\u30b8\u3092\u958b\u304dCRUD\u64cd\u4f5c\u304c\u884c\u3048\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\uff0e\u7121\u4e8b\u306b\u4f5c\u6210\u3067\u304d\u308c\u3070\u5b8c\u4e86\u3067\u3059\uff0e \u4ed8\u9332 \u53d6\u5f97\u3057\u305fSchema ## . / src / graphql / schema . graphql schema { query : Query mutation : Mutation subscription : Subscription } type Comment { # A unique identifier for the comment . commentId : String ! # The comment 's content. content: String! # The comment timestamp. This field is indexed to enable sorted pagination. createdAt: String! # The id of the comment' s parent event . eventId : ID ! } type CommentConnection { items : [ Comment ] nextToken : String } type Event { # Paginate through all comments belonging to an individual post . comments ( limit : Int , nextToken : String ) : CommentConnection description : String id : ID ! name : String when : String where : String } type EventConnection { items : [ Event ] nextToken : String } type Mutation { # Comment on an event . commentOnEvent ( content : String ! , createdAt : String ! , eventId : ID ! ) : Comment # Create a single event . createEvent ( description : String ! , name : String ! , when : String ! , where : String ! ) : Event # Delete a single event by id . deleteEvent ( id : ID ! ) : Event } type Query { # Get a single event by id . getEvent ( id : ID ! ) : Event # Paginate through events . listEvents ( filter : TableEventFilterInput , limit : Int , nextToken : String ) : EventConnection } type Subscription { subscribeToEventComments ( eventId : String ! ) : Comment } input TableBooleanFilterInput { eq : Boolean ne : Boolean } input TableEventFilterInput { description : TableStringFilterInput id : TableIDFilterInput name : TableStringFilterInput when : TableStringFilterInput where : TableStringFilterInput } input TableFloatFilterInput { between : [ Float ] contains : Float eq : Float ge : Float gt : Float le : Float lt : Float ne : Float notContains : Float } input TableIDFilterInput { beginsWith : ID between : [ ID ] contains : ID eq : ID ge : ID gt : ID le : ID lt : ID ne : ID notContains : ID } input TableIntFilterInput { between : [ Int ] contains : Int eq : Int ge : Int gt : Int le : Int lt : Int ne : Int notContains : Int } input TableStringFilterInput { beginsWith : String between : [ String ] contains : String eq : String ge : String gt : String le : String lt : String ne : String notContains : String } \u751f\u6210\u3055\u308c\u305fDocuments # ./src/graphql/all-operation.graphql # this is an auto generated file. This will be overwritten query GetEvent($id: ID!) { getEvent(id: $id) { comments { nextToken } description id name when where } } query ListEvents( $filter: TableEventFilterInput $limit: Int $nextToken: String ) { listEvents(filter: $filter, limit: $limit, nextToken: $nextToken) { items { description id name when where } nextToken } } mutation CommentOnEvent($content: String!, $createdAt: String!, $eventId: ID!) { commentOnEvent(content: $content, createdAt: $createdAt, eventId: $eventId) { commentId content createdAt eventId } } mutation CreateEvent( $description: String! $name: String! $when: String! $where: String! ) { createEvent( description: $description name: $name when: $when where: $where ) { comments { nextToken } description id name when where } } mutation DeleteEvent($id: ID!) { deleteEvent(id: $id) { comments { nextToken } description id name when where } } subscription SubscribeToEventComments($eventId: String!) { subscribeToEventComments(eventId: $eventId) { commentId content createdAt eventId } } \u751f\u6210\u3055\u308c\u305f\u578b\u3068React Custom Hook // ./ src / graphql / generated . tsx import gql from 'graphql-tag' ; import * as ApolloReactCommon from '@apollo/react-common' ; import * as ApolloReactHooks from '@apollo/react-hooks' ; export type Maybe < T > = T | null ; /** All built - in and custom scalars , mapped to their actual values */ export type Scalars = { ID : string ; String : string ; Boolean : boolean ; Int : number ; Float : number ; }; export type Comment = { __typename ? : 'Comment' ; commentId : Scalars [ 'String' ]; content : Scalars [ 'String' ]; createdAt : Scalars [ 'String' ]; eventId : Scalars [ 'ID' ]; }; export type CommentConnection = { __typename ? : 'CommentConnection' ; items ? : Maybe < Array < Maybe < Comment >>> ; nextToken ? : Maybe < Scalars [ 'String' ] > ; }; export type Event = { __typename ? : 'Event' ; comments ? : Maybe < CommentConnection > ; description ? : Maybe < Scalars [ 'String' ] > ; id : Scalars [ 'ID' ]; name ? : Maybe < Scalars [ 'String' ] > ; when ? : Maybe < Scalars [ 'String' ] > ; where ? : Maybe < Scalars [ 'String' ] > ; }; export type EventCommentsArgs = { limit ? : Maybe < Scalars [ 'Int' ] > ; nextToken ? : Maybe < Scalars [ 'String' ] > ; }; export type EventConnection = { __typename ? : 'EventConnection' ; items ? : Maybe < Array < Maybe < Event >>> ; nextToken ? : Maybe < Scalars [ 'String' ] > ; }; export type Mutation = { __typename ? : 'Mutation' ; commentOnEvent ? : Maybe < Comment > ; createEvent ? : Maybe < Event > ; deleteEvent ? : Maybe < Event > ; }; export type MutationCommentOnEventArgs = { content : Scalars [ 'String' ]; createdAt : Scalars [ 'String' ]; eventId : Scalars [ 'ID' ]; }; export type MutationCreateEventArgs = { description : Scalars [ 'String' ]; name : Scalars [ 'String' ]; when : Scalars [ 'String' ]; where : Scalars [ 'String' ]; }; export type MutationDeleteEventArgs = { id : Scalars [ 'ID' ]; }; export type Query = { __typename ? : 'Query' ; getEvent ? : Maybe < Event > ; listEvents ? : Maybe < EventConnection > ; }; export type QueryGetEventArgs = { id : Scalars [ 'ID' ]; }; export type QueryListEventsArgs = { filter ? : Maybe < TableEventFilterInput > ; limit ? : Maybe < Scalars [ 'Int' ] > ; nextToken ? : Maybe < Scalars [ 'String' ] > ; }; export type Subscription = { __typename ? : 'Subscription' ; subscribeToEventComments ? : Maybe < Comment > ; }; export type SubscriptionSubscribeToEventCommentsArgs = { eventId : Scalars [ 'String' ]; }; export type TableBooleanFilterInput = { eq ? : Maybe < Scalars [ 'Boolean' ] > ; ne ? : Maybe < Scalars [ 'Boolean' ] > ; }; export type TableEventFilterInput = { description ? : Maybe < TableStringFilterInput > ; id ? : Maybe < TableIdFilterInput > ; name ? : Maybe < TableStringFilterInput > ; when ? : Maybe < TableStringFilterInput > ; where ? : Maybe < TableStringFilterInput > ; }; export type TableFloatFilterInput = { between ? : Maybe < Array < Maybe < Scalars [ 'Float' ] >>> ; contains ? : Maybe < Scalars [ 'Float' ] > ; eq ? : Maybe < Scalars [ 'Float' ] > ; ge ? : Maybe < Scalars [ 'Float' ] > ; gt ? : Maybe < Scalars [ 'Float' ] > ; le ? : Maybe < Scalars [ 'Float' ] > ; lt ? : Maybe < Scalars [ 'Float' ] > ; ne ? : Maybe < Scalars [ 'Float' ] > ; notContains ? : Maybe < Scalars [ 'Float' ] > ; }; export type TableIdFilterInput = { beginsWith ? : Maybe < Scalars [ 'ID' ] > ; between ? : Maybe < Array < Maybe < Scalars [ 'ID' ] >>> ; contains ? : Maybe < Scalars [ 'ID' ] > ; eq ? : Maybe < Scalars [ 'ID' ] > ; ge ? : Maybe < Scalars [ 'ID' ] > ; gt ? : Maybe < Scalars [ 'ID' ] > ; le ? : Maybe < Scalars [ 'ID' ] > ; lt ? : Maybe < Scalars [ 'ID' ] > ; ne ? : Maybe < Scalars [ 'ID' ] > ; notContains ? : Maybe < Scalars [ 'ID' ] > ; }; export type TableIntFilterInput = { between ? : Maybe < Array < Maybe < Scalars [ 'Int' ] >>> ; contains ? : Maybe < Scalars [ 'Int' ] > ; eq ? : Maybe < Scalars [ 'Int' ] > ; ge ? : Maybe < Scalars [ 'Int' ] > ; gt ? : Maybe < Scalars [ 'Int' ] > ; le ? : Maybe < Scalars [ 'Int' ] > ; lt ? : Maybe < Scalars [ 'Int' ] > ; ne ? : Maybe < Scalars [ 'Int' ] > ; notContains ? : Maybe < Scalars [ 'Int' ] > ; }; export type TableStringFilterInput = { beginsWith ? : Maybe < Scalars [ 'String' ] > ; between ? : Maybe < Array < Maybe < Scalars [ 'String' ] >>> ; contains ? : Maybe < Scalars [ 'String' ] > ; eq ? : Maybe < Scalars [ 'String' ] > ; ge ? : Maybe < Scalars [ 'String' ] > ; gt ? : Maybe < Scalars [ 'String' ] > ; le ? : Maybe < Scalars [ 'String' ] > ; lt ? : Maybe < Scalars [ 'String' ] > ; ne ? : Maybe < Scalars [ 'String' ] > ; notContains ? : Maybe < Scalars [ 'String' ] > ; }; export type GetEventQueryVariables = { id : Scalars [ 'ID' ]; }; export type GetEventQuery = ( { __typename ? : 'Query' } & { getEvent ? : Maybe < ( { __typename ? : 'Event' } & Pick < Event , 'description' | 'id' | 'name' | 'when' | 'where' > & { comments ? : Maybe < ( { __typename ? : 'CommentConnection' } & Pick < CommentConnection , 'nextToken' > ) > } ) > } ); export type ListEventsQueryVariables = { filter ? : Maybe < TableEventFilterInput > ; limit ? : Maybe < Scalars [ 'Int' ] > ; nextToken ? : Maybe < Scalars [ 'String' ] > ; }; export type ListEventsQuery = ( { __typename ? : 'Query' } & { listEvents ? : Maybe < ( { __typename ? : 'EventConnection' } & Pick < EventConnection , 'nextToken' > & { items ? : Maybe < Array < Maybe < ( { __typename ? : 'Event' } & Pick < Event , 'description' | 'id' | 'name' | 'when' | 'where' > ) >>> } ) > } ); export type CommentOnEventMutationVariables = { content : Scalars [ 'String' ]; createdAt : Scalars [ 'String' ]; eventId : Scalars [ 'ID' ]; }; export type CommentOnEventMutation = ( { __typename ? : 'Mutation' } & { commentOnEvent ? : Maybe < ( { __typename ? : 'Comment' } & Pick < Comment , 'commentId' | 'content' | 'createdAt' | 'eventId' > ) > } ); export type CreateEventMutationVariables = { description : Scalars [ 'String' ]; name : Scalars [ 'String' ]; when : Scalars [ 'String' ]; where : Scalars [ 'String' ]; }; export type CreateEventMutation = ( { __typename ? : 'Mutation' } & { createEvent ? : Maybe < ( { __typename ? : 'Event' } & Pick < Event , 'description' | 'id' | 'name' | 'when' | 'where' > & { comments ? : Maybe < ( { __typename ? : 'CommentConnection' } & Pick < CommentConnection , 'nextToken' > ) > } ) > } ); export type DeleteEventMutationVariables = { id : Scalars [ 'ID' ]; }; export type DeleteEventMutation = ( { __typename ? : 'Mutation' } & { deleteEvent ? : Maybe < ( { __typename ? : 'Event' } & Pick < Event , 'description' | 'id' | 'name' | 'when' | 'where' > & { comments ? : Maybe < ( { __typename ? : 'CommentConnection' } & Pick < CommentConnection , 'nextToken' > ) > } ) > } ); export type SubscribeToEventCommentsSubscriptionVariables = { eventId : Scalars [ 'String' ]; }; export type SubscribeToEventCommentsSubscription = ( { __typename ? : 'Subscription' } & { subscribeToEventComments ? : Maybe < ( { __typename ? : 'Comment' } & Pick < Comment , 'commentId' | 'content' | 'createdAt' | 'eventId' > ) > } ); export const GetEventDocument = gql ` query GetEvent ( $ id : ID ! ) { getEvent ( id : $ id ) { comments { nextToken } description id name when where } } ` ; /** * __useGetEventQuery__ * * To run a query within a React component , call `useGetEventQuery` and pass it any options that fit your needs . * When your component renders , `useGetEventQuery` returns an object from Apollo Client that contains loading , error , and data properties * you can use to render your UI . * * @param baseOptions options that will be passed into the query , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options; * * @example * const { data , loading , error } = useGetEventQuery ({ * variables : { * id : // value for 'id' * }, * }); */ export function useGetEventQuery ( baseOptions ? : ApolloReactHooks . QueryHookOptions < GetEventQuery , GetEventQueryVariables > ) { return ApolloReactHooks . useQuery < GetEventQuery , GetEventQueryVariables > ( GetEventDocument , baseOptions ); } export function useGetEventLazyQuery ( baseOptions ? : ApolloReactHooks . LazyQueryHookOptions < GetEventQuery , GetEventQueryVariables > ) { return ApolloReactHooks . useLazyQuery < GetEventQuery , GetEventQueryVariables > ( GetEventDocument , baseOptions ); } export type GetEventQueryHookResult = ReturnType < typeof useGetEventQuery > ; export type GetEventLazyQueryHookResult = ReturnType < typeof useGetEventLazyQuery > ; export type GetEventQueryResult = ApolloReactCommon . QueryResult < GetEventQuery , GetEventQueryVariables > ; export const ListEventsDocument = gql ` query ListEvents ( $ filter : TableEventFilterInput , $ limit : Int , $ nextToken : String ) { listEvents ( filter : $ filter , limit : $ limit , nextToken : $ nextToken ) { items { description id name when where } nextToken } } ` ; /** * __useListEventsQuery__ * * To run a query within a React component , call `useListEventsQuery` and pass it any options that fit your needs . * When your component renders , `useListEventsQuery` returns an object from Apollo Client that contains loading , error , and data properties * you can use to render your UI . * * @param baseOptions options that will be passed into the query , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options; * * @example * const { data , loading , error } = useListEventsQuery ({ * variables : { * filter : // value for 'filter' * limit : // value for 'limit' * nextToken : // value for 'nextToken' * }, * }); */ export function useListEventsQuery ( baseOptions ? : ApolloReactHooks . QueryHookOptions < ListEventsQuery , ListEventsQueryVariables > ) { return ApolloReactHooks . useQuery < ListEventsQuery , ListEventsQueryVariables > ( ListEventsDocument , baseOptions ); } export function useListEventsLazyQuery ( baseOptions ? : ApolloReactHooks . LazyQueryHookOptions < ListEventsQuery , ListEventsQueryVariables > ) { return ApolloReactHooks . useLazyQuery < ListEventsQuery , ListEventsQueryVariables > ( ListEventsDocument , baseOptions ); } export type ListEventsQueryHookResult = ReturnType < typeof useListEventsQuery > ; export type ListEventsLazyQueryHookResult = ReturnType < typeof useListEventsLazyQuery > ; export type ListEventsQueryResult = ApolloReactCommon . QueryResult < ListEventsQuery , ListEventsQueryVariables > ; export const CommentOnEventDocument = gql ` mutation CommentOnEvent ( $ content : String ! , $ createdAt : String ! , $ eventId : ID ! ) { commentOnEvent ( content : $ content , createdAt : $ createdAt , eventId : $ eventId ) { commentId content createdAt eventId } } ` ; export type CommentOnEventMutationFn = ApolloReactCommon . MutationFunction < CommentOnEventMutation , CommentOnEventMutationVariables > ; /** * __useCommentOnEventMutation__ * * To run a mutation , you first call `useCommentOnEventMutation` within a React component and pass it any options that fit your needs . * When your component renders , `useCommentOnEventMutation` returns a tuple that includes : * - A mutate function that you can call at any time to execute the mutation * - An object with fields that represent the current status of the mutation 's execution * * @param baseOptions options that will be passed into the mutation , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options-2; * * @example * const [ commentOnEventMutation , { data , loading , error }] = useCommentOnEventMutation ({ * variables : { * content : // value for 'content' * createdAt : // value for 'createdAt' * eventId : // value for 'eventId' * }, * }); */ export function useCommentOnEventMutation ( baseOptions ? : ApolloReactHooks . MutationHookOptions < CommentOnEventMutation , CommentOnEventMutationVariables > ) { return ApolloReactHooks . useMutation < CommentOnEventMutation , CommentOnEventMutationVariables > ( CommentOnEventDocument , baseOptions ); } export type CommentOnEventMutationHookResult = ReturnType < typeof useCommentOnEventMutation > ; export type CommentOnEventMutationResult = ApolloReactCommon . MutationResult < CommentOnEventMutation > ; export type CommentOnEventMutationOptions = ApolloReactCommon . BaseMutationOptions < CommentOnEventMutation , CommentOnEventMutationVariables > ; export const CreateEventDocument = gql ` mutation CreateEvent ( $ description : String ! , $ name : String ! , $ when : String ! , $ where : String ! ) { createEvent ( description : $ description , name : $ name , when : $ when , where : $ where ) { comments { nextToken } description id name when where } } ` ; export type CreateEventMutationFn = ApolloReactCommon . MutationFunction < CreateEventMutation , CreateEventMutationVariables > ; /** * __useCreateEventMutation__ * * To run a mutation , you first call `useCreateEventMutation` within a React component and pass it any options that fit your needs . * When your component renders , `useCreateEventMutation` returns a tuple that includes : * - A mutate function that you can call at any time to execute the mutation * - An object with fields that represent the current status of the mutation 's execution * * @param baseOptions options that will be passed into the mutation , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options-2; * * @example * const [ createEventMutation , { data , loading , error }] = useCreateEventMutation ({ * variables : { * description : // value for 'description' * name : // value for 'name' * when : // value for 'when' * where : // value for 'where' * }, * }); */ export function useCreateEventMutation ( baseOptions ? : ApolloReactHooks . MutationHookOptions < CreateEventMutation , CreateEventMutationVariables > ) { return ApolloReactHooks . useMutation < CreateEventMutation , CreateEventMutationVariables > ( CreateEventDocument , baseOptions ); } export type CreateEventMutationHookResult = ReturnType < typeof useCreateEventMutation > ; export type CreateEventMutationResult = ApolloReactCommon . MutationResult < CreateEventMutation > ; export type CreateEventMutationOptions = ApolloReactCommon . BaseMutationOptions < CreateEventMutation , CreateEventMutationVariables > ; export const DeleteEventDocument = gql ` mutation DeleteEvent ( $ id : ID ! ) { deleteEvent ( id : $ id ) { comments { nextToken } description id name when where } } ` ; export type DeleteEventMutationFn = ApolloReactCommon . MutationFunction < DeleteEventMutation , DeleteEventMutationVariables > ; /** * __useDeleteEventMutation__ * * To run a mutation , you first call `useDeleteEventMutation` within a React component and pass it any options that fit your needs . * When your component renders , `useDeleteEventMutation` returns a tuple that includes : * - A mutate function that you can call at any time to execute the mutation * - An object with fields that represent the current status of the mutation 's execution * * @param baseOptions options that will be passed into the mutation , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options-2; * * @example * const [ deleteEventMutation , { data , loading , error }] = useDeleteEventMutation ({ * variables : { * id : // value for 'id' * }, * }); */ export function useDeleteEventMutation ( baseOptions ? : ApolloReactHooks . MutationHookOptions < DeleteEventMutation , DeleteEventMutationVariables > ) { return ApolloReactHooks . useMutation < DeleteEventMutation , DeleteEventMutationVariables > ( DeleteEventDocument , baseOptions ); } export type DeleteEventMutationHookResult = ReturnType < typeof useDeleteEventMutation > ; export type DeleteEventMutationResult = ApolloReactCommon . MutationResult < DeleteEventMutation > ; export type DeleteEventMutationOptions = ApolloReactCommon . BaseMutationOptions < DeleteEventMutation , DeleteEventMutationVariables > ; export const SubscribeToEventCommentsDocument = gql ` subscription SubscribeToEventComments ( $ eventId : String ! ) { subscribeToEventComments ( eventId : $ eventId ) { commentId content createdAt eventId } } ` ; /** * __useSubscribeToEventCommentsSubscription__ * * To run a query within a React component , call `useSubscribeToEventCommentsSubscription` and pass it any options that fit your needs . * When your component renders , `useSubscribeToEventCommentsSubscription` returns an object from Apollo Client that contains loading , error , and data properties * you can use to render your UI . * * @param baseOptions options that will be passed into the subscription , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options; * * @example * const { data , loading , error } = useSubscribeToEventCommentsSubscription ({ * variables : { * eventId : // value for 'eventId' * }, * }); */ export function useSubscribeToEventCommentsSubscription ( baseOptions ? : ApolloReactHooks . SubscriptionHookOptions < SubscribeToEventCommentsSubscription , SubscribeToEventCommentsSubscriptionVariables > ) { return ApolloReactHooks . useSubscription < SubscribeToEventCommentsSubscription , SubscribeToEventCommentsSubscriptionVariables > ( SubscribeToEventCommentsDocument , baseOptions ); } export type SubscribeToEventCommentsSubscriptionHookResult = ReturnType < typeof useSubscribeToEventCommentsSubscription > ; export type SubscribeToEventCommentsSubscriptionResult = ApolloReactCommon . SubscriptionResult < SubscribeToEventCommentsSubscription > ;","title":"React\u3067\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u3092\u69cb\u7bc9\u3059\u308b"},{"location":"hands-on/react/react/#react","text":"\u4f5c\u6210\u3057\u305fAppSync\u306b\u3092\u5229\u7528\u3059\u308b\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 React \u3067\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff0e","title":"React\u3067\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u3092\u69cb\u7bc9\u3059\u308b"},{"location":"hands-on/react/react/#create-react-app","text":"Create React App\uff08CRA\uff09\u3092\u4f7f\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3057\u307e\u3059\uff0e\u4efb\u610f\u306e\u4f5c\u696d\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u5f8c\u3001\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e npx create-react-app@3.4.1 --template typescript react-appsync-protected-by-auth0 cd react-appsync-protected-by-auth0 React Router\u3068Auth0\u306eSPA\u7528SDK\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e yarn add react-router-dom@5.1.2 @auth0/auth0-spa-js@1.8.1 yarn add -D @types/react-router-dom@5.1.2 Auth0\u3092React\u3067\u5229\u7528\u3059\u308b\u70ba\u306eCustom Hook\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e // ./src/react-auth0-spa.tsx import React from 'react' ; import createAuth0Client , { Auth0Client , Auth0ClientOptions , getIdTokenClaimsOptions , GetTokenSilentlyOptions , GetTokenWithPopupOptions , IdToken , LogoutOptions , PopupConfigOptions , PopupLoginOptions , RedirectLoginOptions , } from '@auth0/auth0-spa-js' ; type Auth0ContextOptions = { isAuthenticated : boolean ; user : any ; loading : boolean ; popupOpen : boolean ; loginWithPopup : ( options? : PopupLoginOptions , config? : PopupConfigOptions ) => Promise < void > ; handleRedirectCallback : ( path? : string ) => Promise < void > ; getIdTokenClaims : ( options? : getIdTokenClaimsOptions ) => Promise < IdToken > ; loginWithRedirect : ( options? : RedirectLoginOptions ) => Promise < void > ; getTokenSilently : ( options? : GetTokenSilentlyOptions ) => Promise < any > ; getTokenWithPopup : ( options? : GetTokenWithPopupOptions , config? : PopupConfigOptions ) => Promise < string > ; logout : ( options? : LogoutOptions ) => void ; } export type Auth0ProviderOptions = Auth0ClientOptions & { children : React.ReactElement ; onRedirectCallback : Auth0ContextOptions [ 'handleRedirectCallback' ]; } export const Auth0Context = React . createContext ({} as Auth0ContextOptions ); export const useAuth0 = () => React . useContext < Auth0ContextOptions > ( Auth0Context ); export const Auth0Provider : React.FC < Auth0ProviderOptions > = ( { children , onRedirectCallback , ... initOptions } ) => { const [ isAuthenticated , setIsAuthenticated ] = React . useState < boolean > ( false ); const [ user , setUser ] = React . useState < any > ( null ); const [ auth0Client , setAuth0 ] = React . useState < Auth0Client > (); const [ loading , setLoading ] = React . useState < boolean > ( true ); const [ popupOpen , setPopupOpen ] = React . useState < boolean > ( false ); React . useEffect (() => { const initAuth0 = async () => { const auth0FromHook = await createAuth0Client ( initOptions ); setAuth0 ( auth0FromHook ); if ( window . location . search . includes ( 'code=' ) && window . location . search . includes ( 'state=' )) { const { appState } = await auth0FromHook . handleRedirectCallback (); await onRedirectCallback ( appState ? . targetUrl ); } const isAuthenticated = await auth0FromHook . isAuthenticated (); setIsAuthenticated ( isAuthenticated ); if ( isAuthenticated ) { const user = await auth0FromHook . getUser (); setUser ( user ); } setLoading ( false ); }; initAuth0 (); // eslint-disable-next-line }, []); const loginWithPopup : Auth0ContextOptions [ 'loginWithPopup' ] = async ( options , config ) => { setPopupOpen ( true ); try { await auth0Client ! . loginWithPopup ( options , config ); } catch ( error ) { console . error ( error ); } finally { setPopupOpen ( false ); } const user = await auth0Client ! . getUser (); setUser ( user ); setIsAuthenticated ( true ); }; const handleRedirectCallback : Auth0ContextOptions [ 'handleRedirectCallback' ] = async ( url ) => { setLoading ( true ); await auth0Client ! . handleRedirectCallback ( url ); const user = await auth0Client ! . getUser (); setLoading ( false ); setIsAuthenticated ( true ); setUser ( user ); }; return ( < Auth0Context . Provider value = {{ isAuthenticated , user , loading , popupOpen , loginWithPopup , handleRedirectCallback , getIdTokenClaims : ( options ) => auth0Client ! . getIdTokenClaims ( options ), loginWithRedirect : ( options ) => auth0Client ! . loginWithRedirect ( options ), getTokenSilently : ( options ) => auth0Client ! . getTokenSilently ( options ), getTokenWithPopup : ( options , config ) => auth0Client ! . getTokenWithPopup ( options , config ), logout : ( options ) => auth0Client ! . logout ( options ) }} > { children } < /Auth0Context.Provider> ); }; \u30ed\u30b0\u30a4\u30f3\uff0f\u30ed\u30b0\u30a2\u30a6\u30c8\u64cd\u4f5c\u3092\u884c\u308f\u305b\u308b\u70ba\u306bNavBar\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e // ./src/components/NavBar.tsx import React from \"react\" ; import { useAuth0 } from \"../react-auth0-spa\" ; export const NavBar = () => { const { isAuthenticated , loginWithRedirect , logout } = useAuth0 (); return ( < div > { ! isAuthenticated && ( < button onClick = {() => loginWithRedirect ({})} > Log in < /button> )} { isAuthenticated && < button onClick = {() => logout ()} > Log out < /button>} < /div> ); }; history\u3092\u751f\u6210\u3057\u3001\u3069\u3053\u304b\u3089\u3067\u3082\u30a2\u30af\u30bb\u30b9\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e TODO: \u3053\u306e\u90e8\u5206\u306e\u8aac\u660e\u304c\u602a\u3057\u3044 useHistory() Hook\u3092\u4f7f\u308f\u305a\u306b\u3001createBrowserHistory()\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u524d\u8005\u306fRoute\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u914d\u4e0b\u3067\u3057\u304b\u4f7f\u3048\u306a\u3044\u304c\u3001\u5f8c\u8005\u306f\u3069\u3053\u3067\u3082\u4f7f\u3048\u308b\uff08\u5c11\u306a\u304f\u3068\u3082push\u306e\u5b9a\u7fa9\u306f\u51fa\u6765\u308b\uff09\u304b\u3089\u3067\u3059\uff0e import { createBrowserHistory } from \"history\" ; export const history = createBrowserHistory (); Auth0\u306e\u8a2d\u5b9a\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u53d6\u308a\u8fbc\u3081\u308b\u3088\u3046\u306bJSON\u5f62\u5f0f\u3067\u4fdd\u5b58\u3057\u307e\u3059\uff0e\u5148\u7a0b\u4f5c\u6210\u3057\u305f\u3001Auth0\u306eApplication\u5b9a\u7fa9\u306eSettings\u30bf\u30d6\u304b\u3089Domain\u3068Client ID\u3092\u8ee2\u8a18\u3057\u3066\u304f\u3060\u3055\u3044\uff0e \u4eca\u56de\u306f\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306a\u306e\u3067\u3001\u74b0\u5883\uff08dev/stg/prd\uff09\u5dee\u5206\u3092\u8003\u616e\u305b\u305a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u30cf\u30fc\u30c9\u30b3\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\uff0e # ./src/auth-config.json { \"domain\" : \"YOUR_DOMAIN\" , \"clientId\" : \"YOUR_CLIENT_ID\" } \u4f5c\u6210\u3057\u305fAuth0 Custom Hook\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d50\u5408\u3055\u305b\u308b\u70ba\u306b\u3001 index.tsx \u3092\u7de8\u96c6\u3057\u307e\u3059\uff0e // ./src/index.tsx import React from 'react' ; import ReactDOM from 'react-dom' ; import { App } from './App' ; import * as serviceWorker from './serviceWorker' ; import { history } from './utils/history' ; import { Auth0Provider } from \"./react-auth0-spa\" ; import config from \"./auth_config.json\" ; const onRedirectCallback = async ( url? : string ) => { history . push ( url ?? window . location . pathname ); }; ReactDOM . render ( < React . StrictMode > < Auth0Provider domain = { config . domain } client_id = { config . clientId } redirect_uri = { window . location . origin } onRedirectCallback = { onRedirectCallback } > < App /> < /Auth0Provider> < /React.StrictMode>, document . getElementById ( 'root' ) ); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker . unregister (); CRA\u3067\u751f\u6210\u3055\u308c\u305fCSS\u7b49\u4f7f\u308f\u306a\u3044\u306e\u3067\u524a\u9664\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\uff0e logo.svg index.tsx index.css App.css App.test.tsx \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3066\u3001\u30ed\u30b0\u30a4\u30f3\u304c\u51fa\u6765\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\uff0e \u307e\u305a\u3001\u30c6\u30b9\u30c8\u7528\u306e\u30e6\u30fc\u30b6\u30fc\u3092Auth0\u306b\u4f5c\u6210\u3057\u307e\u3059\uff0eAuth0\u306eDashbord\u3092\u958b\u304d\u3001 Users & Roles \u3001 Users \u3068\u30e1\u30cb\u30e5\u30fc\u3092\u9078\u629e\u3057\u3001 CREATE USER \u3092\u9078\u629e\u3057\u307e\u3059\uff0e \u30e6\u30fc\u30b6\u30fc\u306eEmail\u3068Password\u3092\u5165\u529b\u3057\u3001 CREATE \u3092\u9078\u629e\u3057\u307e\u3059\uff0e \u30d9\u30ea\u30d5\u30a1\u30a4\u306e\u30e1\u30fc\u30eb\u304c\u5c4a\u304f\u306e\u3067\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u4f7f\u7528\u53ef\u80fd\u306a\u72b6\u614b\u306b\u9077\u79fb\u3055\u305b\u307e\u3059\uff0e \u30e6\u30fc\u30b6\u30fc\u306e\u6e96\u5099\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u30ed\u30b0\u30a4\u30f3\u304c\u884c\u3048\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\uff0e\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30d6\u30e9\u30a6\u30b6\u3067 http://loclahost:3000 \u304c\u958b\u304d\u307e\u3059\uff0e\u81ea\u52d5\u3067\u30d6\u30e9\u30a6\u30b6\u304c\u958b\u304b\u306a\u3044\u5834\u5408\u306f\u624b\u52d5\u3067URL\u3092\u5165\u529b\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u3060\u3055\u3044\uff0e yarn start \u30d6\u30e9\u30a6\u30b6\u3067\u7d20\u6734\u306a\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001Log in\u30dc\u30bf\u30f3\u3092\u9078\u629e\u3057\u307e\u3059\uff0e Auth0\u306e\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u30e6\u30fc\u30b6\u30fc\u306eEmail\u3068Password\u3092\u5165\u529b\u3057\u3001 LOG IN \u3092\u9078\u629e\u3057\u307e\u3059\uff0e \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3059\u308b\u8a8d\u53ef\u3092\u78ba\u8a8d\u3055\u308c\u308b\u306e\u3067\u30c1\u30a7\u30c3\u30af\u30a2\u30a4\u30b3\u30f3\u3092\u9078\u629e\u3057\u307e\u3059\uff0e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u30a2\u30a4\u30b3\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u306d\uff0e \u4e00\u77ac\u3001 Loading... \u3068\u8868\u793a\u3055\u308c\u305f\u5f8c\u306b\u3001 Log out \u30dc\u30bf\u30f3\u3060\u3051\u306e\u7d20\u6734\u306a\u753b\u9762\u306b\u623b\u308c\u3070\u6210\u529f\u3067\u3059\uff0e Log out \u3092\u9078\u629e\u3057\u3066\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\uff0e\u4ee5\u964d\u3082\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7de8\u96c6\u3059\u308b\u524d\u306b\u306f\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u304b\u3089\u884c\u3044\u307e\u3059\uff0e\u7279\u306b\u5f8c\u307b\u3069 audience \u3092\u8a2d\u5b9a\u3059\u308b\u969b\u306b\u306f\u4e8b\u524d\u306b\u30ed\u30b0\u30a2\u30a6\u30c8\u304c\u5fc5\u9808\u3067\u3059\uff0e","title":"Create React App\u3092\u4f7f\u3063\u3066\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b"},{"location":"hands-on/react/react/#_1","text":"Token \u306e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u753b\u9762\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e Token \u304b\u3089\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u306e\u3067\u30ed\u30b0\u30a4\u30f3\u6e08\u307f\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u70ba\u306b\u3001\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3051\u308c\u3070Auth0\u306e\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u3078\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308bPrivate Route\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e \u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u753b\u9762\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0eAuth0 Custom Hook\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3001\u8868\u793a\u3057\u307e\u3059\uff0e // ./src/components/Profile.tsx import React from \"react\" ; import { useAuth0 } from \"../react-auth0-spa\" ; export const Profile = () => { const { loading , user } = useAuth0 (); if ( loading || ! user ) { return < div > Loading ... < /div>; } return ( <> < img src = { user . picture } alt = \"Profile\" /> < h2 > { user . name } < /h2> < p > { user . email } < /p> < code > { JSON . stringify ( user , null , 2 )} < /code> < /> ); }; NavBar.tsx \u3092\u5909\u66f4\u3057\u3001Profile\u753b\u9762\u306b\u79fb\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e // ./ src / components / NavBar . tsx import React from 'react' ; import { useAuth0 } from '../react-auth0-spa' ; import { Link } from 'react-router-dom' ; export const NavBar = () => { const { isAuthenticated , loginWithRedirect , logout } = useAuth0 (); return ( < div > { ! isAuthenticated && ( < button onClick = {() => loginWithRedirect ()} > Log in </ button > )} { isAuthenticated && ( <> < button onClick = {() => logout ()} > Log out </ button > < span > < Link to = \"/\" > Home </ Link > | < Link to = \"/profile\" > Profile </ Link > </ span > </> )} </ div > ); }; App.tsx \u3092\u5909\u66f4\u3057Profile\u753b\u9762\u3078\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff0e // ./src/App.tsx import React from \"react\" ; import { NavBar } from \"./components/NavBar\" ; import { Router , Route , Switch } from \"react-router-dom\" ; import { Profile } from \"./components/Profile\" ; import { history } from \"./utils/history\" ; export const App = () => { return ( < div className = \"App\" > < Router history = { history } > < header > < NavBar /> < /header> < Switch > < Route path = \"/\" exact /> < Route path = \"/profile\" component = { Profile } /> < /Switch> < /Router> < /div> ); }; \u307e\u3060\u3001\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4e0b\u8a18\u306eURL\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068Loading\u72b6\u614b\u306e\u307e\u307e\u9077\u79fb\u3057\u307e\u305b\u3093\uff0e http://localhost:3000/profile Private Route \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\u3053\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f React Router\u306eRoute\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306eWrapper\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u307e\u3059\uff0e // ./src/components/PrivateRoute.tsx import React from 'react' ; import { Route , RouteProps } from 'react-router-dom' ; import { useAuth0 } from '../react-auth0-spa' ; export const PrivateRoute : React.FC < RouteProps > = ({ component : Component , path , ... rest }) => { const { loading , isAuthenticated , loginWithRedirect } = useAuth0 (); React . useEffect (() => { if ( loading || isAuthenticated ) { return ; } const fn = async () => { await loginWithRedirect ({ appState : { targetUrl : window.location.pathname } }); }; fn (); }, [ loading , isAuthenticated , loginWithRedirect , path ]); const render : RouteProps [ 'render' ] = props => { if ( isAuthenticated && Component != null ) { return < Component {... props } /> ; } return null ; }; return < Route path = { path } render = { render } {... rest } /> ; }; App.tsx \u3092\u5909\u66f4\u3057\u3066\u3001Profile\u753b\u9762\u3092Private Route\u3067\u4fdd\u8b77\u3057\u307e\u3059\uff0e // ./src/App.tsx import React from \"react\" ; import { NavBar } from \"./components/NavBar\" ; import { Router , Route , Switch } from \"react-router-dom\" ; import { Profile } from \"./components/Profile\" ; import { history } from \"./utils/history\" ; import { PrivateRoute } from './components/PrivateRoute' ; export const App = () => { return ( < div className = \"App\" > < Router history = { history } > < header > < NavBar /> < /header> < Switch > < Route path = \"/\" exact /> < PrivateRoute path = \"/profile\" component = { Profile } /> < /Switch> < /Router> < /div> ); }; \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3066\u3001\u30ed\u30b0\u30a2\u30a6\u30c8\u72b6\u614b\u3067Profile\u753b\u9762\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\uff0e\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u72b6\u614b\u3067\u4e0b\u8a18\u306eURL\u3078\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\uff0e http://localhost:3000/profile Auth0\u306e\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u3078\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u308b\u306e\u3067\u3001Email\u3068Password\u3092\u5165\u529b\u3057\u307e\u3059\uff0e Profile\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff0e\u8868\u793a\u3092\u78ba\u8a8d\u3067\u304d\u305f\u3089\u3001\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\uff0e","title":"\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u753b\u9762\u306b\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u8868\u793a\u3059\u308b"},{"location":"hands-on/react/react/#schemahooks","text":"AppSync Schema\uff08GraphQL Schema\uff09\u304b\u3089\u578b\u3068React Custom Hook\u3092\u751f\u6210\u3057\u307e\u3059\uff0e \u4e00\u5ea6\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u3057\u307e\u3048\u3070\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067Schema\u3092\u5143\u306b\u4f55\u5ea6\u3067\u3082\u518d\u751f\u6210\u304c\u53ef\u80fd\u3067\u3059\uff0e AWS CLI\u3092\u4f7f\u3063\u3066Schema\u3092\u53d6\u5f97\u3057\u307e\u3059\uff0e\u5f53\u7136\u3067\u3059\u304cAppSync\u3060\u304b\u3089\u51fa\u6765\u308b\u65b9\u6cd5\u3067\u3059\b\uff0c\b\u305d\u308c\u4ee5\u5916\u3067GraphQL\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5bfe\u3057\u3066\u30b3\u30fc\u30c9\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u304c\u76f4\u63a5Schema\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\uff0e\u3082\u3061\u308d\u3093\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066Schema\u3092\u5171\u6709\u3057\u3066\u3082\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\uff0e AWS CLI\u3092\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\uff0c\u4e0b\u8a18\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\uff0e AWS CLI \u30d0\u30fc\u30b8\u30e7\u30f3 2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Schema\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\uff0cSchema\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff0e mkdir -p src/graphql && \\ aws appsync get-introspection-schema --api-id ${ APP_SYNC_API_ID } --format SDL --include-directives src/graphql/schema.graphql Documents\uff08\u30af\u30a8\u30ea\u3001\u30df\u30e5\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3001\u30b5\u30d6\u30b9\u30af\u30ea\u30d7\u30b7\u30e7\u30f3\u306e\u30ea\u30af\u30a8\u30b9\u30c8\uff09\u304c\u7121\u3044\u3068React Custom Hook\u306e\u751f\u6210\u306f\u884c\u3048\u306a\u3044\u306e\u3067\u3001Schema\u304b\u3089Documents\u3092\u751f\u6210\u3057\u307e\u3059\uff0e\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306bAmplify\u95a2\u9023\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306a\u306e\u3067\u3059\u304c\u3001\u30de\u30eb\u30c1\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u30d4\u30f3\u30dd\u30a4\u30f3\u30c8\u3067\u6b32\u3057\u3044\u90e8\u5206\u3060\u3051\u4f7f\u3048\u3066\u52a9\u304b\u308a\u307e\u3059\uff0e \u751f\u6210\u3055\u308c\u308bDocuments\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u5168\u3066\u306e\u9805\u76ee\u3092\u8981\u6c42\u3059\u308b\u70ba\u3001\u5fc5\u8981\u306a\u9805\u76ee\u3060\u3051\u53d6\u5f97\u3067\u304d\u308b\u3068\u3044\u3046GraphQL\u306e\u30e1\u30ea\u30c3\u30c8\u3092\u6bba\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u3053\u308c\u3092\u5acc\u3046\u5834\u5408\u306f\u3001\u624b\u52d5\u3067Documents\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff0e yarn add -D amplify-graphql-docs-generator@2.1.13 yarn amplify-graphql-docs-generator --schema src/graphql/schema.graphql --output src/graphql/all-operations.graphql --language graphql Schema\u3068Document\u304b\u3089\u578b\u3068React Custom Hook\u3092\u751f\u6210\u3057\u307e\u3059\uff0e \u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e yarn add \\ graphql@15.0.0 \\ @apollo/react-common@3.1.4 \\ @apollo/react-hooks@3.1.5 yarn add -D \\ @graphql-codegen/cli@1.13.5 \\ @graphql-codegen/typescript@1.13.5 \\ @graphql-codegen/typescript-operations@1.13.5 \\ @graphql-codegen/typescript-react-apollo@1.13.5 graphql-codegen\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e \u3053\u306e\u8a2d\u5b9a\u306b\u57fa\u3065\u3044\u3066\u578b\u3084Hook\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3001TypeScript\u306eEnum\u4f7f\u3044\u305f\u304f\u306a\u3044\u306e\u3067\u3001enumsAsTypes\u3092\u6709\u52b9\u306b\u3057\u3066Types\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\uff0e\u597d\u307f\u306b\u5408\u308f\u305b\u3066\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff0e typescript | GraphQL Code Generator # ./codegen.yml overwrite : true schema : - './src/graphql/schema.graphql' documents : - './src/graphql/all-operations.graphql' generates : src/graphql/generated.tsx : plugins : - 'typescript' - 'typescript-operations' - 'typescript-react-apollo' config : withComponent : false withHooks : true withHOC : false enumsAsTypes : true \u578b\u3068React Custom Hooks\u3092\u751f\u6210\u3057\u307e\u3059\uff0e yarn graphql-codegen --config codegen.yml Schema\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u7c21\u5358\u306b\u518d\u751f\u6210\u304c\u3067\u304d\u308b\u3088\u3046\u306b\uff0cnpm scripts\u3092\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\uff0e\u3053\u308c\u3067 yarn codegen \u3068\u3059\u308b\u4e8b\u3067\u518d\u751f\u6210\u304c\u884c\u306a\u3048\u307e\u3059\uff0e // ./package.json ..., \"scripts\" : { ... \"codegen:get-schema\" : \"aws appsync get-introspection-schema --api-id ${APP_SYNC_API_ID} --format SDL --include-directives src/graphql/schema.graphql\" , \"codegen:docsgen\" : \"amplify-graphql-docs-generator --schema src/graphql/schema.graphql --output src/graphql/all-operations.graphql --language graphql\" , \"codegen\" : \"yarn codegen:get-schema && yarn codegen:docsgen && graphql-codegen --config codegen.yml\" } , ... \u5404\u30af\u30a8\u30ea\u30fc\u3001\u30df\u30e5\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3001\u30b5\u30d6\u30b9\u30af\u30ea\u30d7\u30b7\u30e7\u30f3\u306b\u5bfe\u3059\u308bApollo Client\u306eReact Custom Hook\u304c\u751f\u6210\u3055\u308c\u307e\u3057\u305f\uff0eApollo Client\u306f\u304b\u306a\u308a\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30c8\u3067fetch more\u3084polling\u51e6\u7406\u306a\u3069\u304c\u5b9f\u88c5\u6e08\u307f\u3067\u3059\uff0e \u3053\u306e\u69d8\u306b\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3068\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3067\u578b\u3092\u5171\u6709\u3057\u3001\u3055\u3089\u306bAPI\u30a2\u30af\u30bb\u30b9\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u3092\u81ea\u52d5\u751f\u6210\u3067\u304d\u308b\u4e8b\u306f\u3001AppSync\uff08GraphQL\uff09\u4f7f\u3046\u975e\u5e38\u306b\u5927\u304d\u306a\u30e1\u30ea\u30c3\u30c8\u3067\u3059\u3002 \u53d6\u5f97\u30fb\u751f\u6210\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u4ed8\u9332\u306e\u7ae0\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e","title":"Schema\u306e\u53d6\u5f97\u3068\u578b\u3068Hooks\u3092\u751f\u6210\u3059\u308b"},{"location":"hands-on/react/react/#_2","text":"Auth0\u304b\u3089Apollo Client\u3078Token\u306e\u53d7\u3051\u6e21\u3057\u3068\u3001\u751f\u6210\u3055\u308c\u305fReact Custom Hook\u3092\u4f7f\u3063\u3066\u3001CRUD\u64cd\u4f5c\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e yarn add \\ apollo-client@2.6.8 \\ apollo-cache-inmemory@1.6.5 \\ apollo-link-context@1.0.20 \\ apollo-link-http@1.5.17 \\ react-apollo@3.1.5 Auth0\u3068AppSync\u306e\u8a2d\u5b9a\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u53d6\u308a\u8fbc\u3081\u308b\u3088\u3046\u306bJSON\u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\uff06\u4f5c\u6210\u3057\u307e\u3059\uff0e auth-config.json \u306b audience \u3092\u8ffd\u52a0\u3057\u307e\u3059\uff0e // ./src/auth-config.json { \"domain\" : \"YOUR_DOMAIN\" , \"clientId\" : \"YOUR_CLIENT_ID\" , \"audience\" : \"YOUR_AUDIENCE\" } app-sync-config.json \u3092\u4f5c\u6210\u3057\u3001uri\u306bAppSync\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5165\u529b\u3057\u307e\u3059\uff0e // ./src/app-sync-cofig.json { \"uri\" : \"YOUR_API_URL\" } Auth0\u304b\u3089Token\u3092\u53d7\u3051\u53d6\u308a\u3001 authorization \u30d8\u30c3\u30c0\u30fc\u306b\u30bb\u30c3\u30c8\u3059\u308b ApolloProvider \u306e Wrapper \u3001 AuthorizedApolloProvider \u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e // ./src/authorized-apollo-client.tsx import React from 'react' ; import { useAuth0 } from './react-auth0-spa' ; import { HttpLink } from 'apollo-link-http' ; import appSyncConfig from './app-sync-config.json' ; import { setContext } from 'apollo-link-context' ; import { ApolloLink } from 'apollo-link' ; import { InMemoryCache } from 'apollo-cache-inmemory' ; import { ApolloClient } from 'apollo-client' ; import { ApolloProvider } from '@apollo/react-hooks' ; export const AuthorizedApolloProvider : React.FC = ({ children }) => { const [ token , setToken ] = React . useState < string > ( '' ); const { loading , getTokenSilently } = useAuth0 (); if ( loading ) { return < h1 > Loading ... < /h1>; } const httpLink = new HttpLink ({ uri : appSyncConfig.uri , fetchOptions : { credentials : 'same-origin' } }); const withTokenLink = setContext ( async () => { if ( token ) { return { auth0Token : token }; } const newToken = await getTokenSilently (); setToken ( newToken ); return { auth0Token : newToken }; }); const authLink = setContext (( _ , { headers , auth0Token }) => ({ headers : { ... headers , ...( auth0Token ? { authorization : auth0Token } : {}) } })); const client = new ApolloClient ({ link : ApolloLink.from ([ withTokenLink , authLink , httpLink ]), cache : new InMemoryCache () }); return ( < ApolloProvider client = { client } > { children } < /ApolloProvider> ); }; \u4f5c\u6210\u3057\u305f AuthorizedApolloProvider \u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d71\u5408\u3057\u307e\u3059\uff0e\u5408\u308f\u305b\u3066\u3001 Auth0Provider \u306b audience \u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e // .src/index.tsx import React from 'react' ; import ReactDOM from 'react-dom' ; import { App } from './App' ; import * as serviceWorker from './serviceWorker' ; import { history } from './utils/history' ; import { Auth0Provider } from './react-auth0-spa' ; import authConfig from './auth-config.json' ; import { AuthorizedApolloProvider } from './authorized-apollo-client' ; const onRedirectCallback = async ( url? : string ) => { history . push ( url ?? window . location . pathname ); }; ReactDOM . render ( < React . StrictMode > < Auth0Provider domain = { authConfig . domain } client_id = { authConfig . clientId } redirect_uri = { window . location . origin } audience = { authConfig . audience } onRedirectCallback = { onRedirectCallback } > < AuthorizedApolloProvider > < App /> < /AuthorizedApolloProvider> < /Auth0Provider> < /React.StrictMode>, document . getElementById ( 'root' ) ); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker . unregister (); Events\u306b\u5bfe\u3057\u3066CRUD\u3059\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\u3068\u308a\u3042\u3048\u305a\u52d5\u3051\u3070\u826f\u3044\u306e\u3067Optimistic UI\u305b\u305a\u30ea\u30d5\u30a7\u30c3\u30c1\u3067\u6e08\u307e\u305b\u3066\u3044\u307e\u3059\uff0e // ./src/components/DemoTable.tsx import React from 'react' ; import { useCreateEventMutation , useDeleteEventMutation , useListEventsQuery } from '../graphql/generated' ; const limit = 100 ; export const DemoTable : React.FC = () => { const { data , refetch } = useListEventsQuery ({ variables : { limit }}); const [ addEvent ] = useCreateEventMutation (); const [ deleteData ] = useDeleteEventMutation (); const handleCreateClick = async () => { await addEvent ({ variables : { name : \"My First Event\" , when : \"Today\" , where : \"My House\" , description : \"Very first event\" , } }) // FIXME: \u30ea\u30d5\u30a7\u30c3\u30c1\u305b\u305a\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u66f8\u304d\u63db\u3048\u308b\u3079\u304d await refetch (); } const handleDeleteClick = async ( id? : string ) => { if ( id == null ) { return } await deleteData ({ variables : { id }}) // FIXME: \u30ea\u30d5\u30a7\u30c3\u30c1\u305b\u305a\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u66f8\u304d\u63db\u3048\u308b\u3079\u304d await refetch (); } return ( <> < h1 > Events 100 \u4ef6\u307e\u3067\u8868\u793a < /h1> < button onClick = {() => { handleCreateClick ()}} > \u4f5c\u6210\u3059\u308b < /button> < table > < thead > < tr > < th > ID < /th> < th > Name < /th> < th > Description < /th> < th > When < /th> < th > Where < /th> < /tr> < /thead> < tbody > { data ? . listEvents ? . items ? . map ( value => ( < tr key = { value ? . id } > < td > { value ? . id } < /td> < td > { value ? . name } < /td> < td > { value ? . description } < /td> < td > { value ? . when } < /td> < td > { value ? . where } < /td> < td >< button onClick = {() => { handleDeleteClick ( value ? . id )}} > \u524a\u9664\u3059\u308b < /button></td> < /tr> )) } < /tbody> < /table> < /> ); }; NavBar.tsx \u306b DemoTable \u3078\u306e\u30ea\u30f3\u30af\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e // ./src/components/NavBar import React from 'react' ; import { useAuth0 } from '../react-auth0-spa' ; import { Link } from 'react-router-dom' ; export const NavBar = () => { const { isAuthenticated , loginWithRedirect , logout } = useAuth0 (); return ( < div > { ! isAuthenticated && ( < button onClick = {() => loginWithRedirect ()} > Log in < /button> )} { isAuthenticated && ( <> < button onClick = {() => logout ()} > Log out < /button> < span > < Link to = \"/\" > Home < /Link> | <Link to=\"/profile\">Profile</Link> | <Link to=\"/demo-table\">Demo Table</Link> < /span> < /> )} < /div> ); }; \u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e // ./src/App.tsx import React from \"react\" ; import { NavBar } from \"./components/NavBar\" ; import { Router , Route , Switch } from \"react-router-dom\" ; import { Profile } from \"./components/Profile\" ; import { DemoTable } from \"./components/DemoTable\" ; import { history } from \"./utils/history\" ; import { PrivateRoute } from './components/PrivateRoute' ; export const App = () => { return ( < div className = \"App\" > < Router history = { history } > < header > < NavBar /> < /header> < Switch > < Route path = \"/\" exact /> < PrivateRoute path = \"/profile\" component = { Profile } /> < PrivateRoute path = \"/demo-table\" component = { DemoTable } /> < /Switch> < /Router> < /div> ); }; \u3053\u308c\u3067\u5b8c\u6210\u3067\u3059\uff0eDemo Table\u30da\u30fc\u30b8\u3092\u958b\u304dCRUD\u64cd\u4f5c\u304c\u884c\u3048\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\uff0e\u7121\u4e8b\u306b\u4f5c\u6210\u3067\u304d\u308c\u3070\u5b8c\u4e86\u3067\u3059\uff0e","title":"\u8a8d\u8a3c\u3092\u9023\u643a\u3057\u30af\u30a8\u30ea\u30fc\u3059\u308b"},{"location":"hands-on/react/react/#_3","text":"","title":"\u4ed8\u9332"},{"location":"hands-on/react/react/#schema","text":"## . / src / graphql / schema . graphql schema { query : Query mutation : Mutation subscription : Subscription } type Comment { # A unique identifier for the comment . commentId : String ! # The comment 's content. content: String! # The comment timestamp. This field is indexed to enable sorted pagination. createdAt: String! # The id of the comment' s parent event . eventId : ID ! } type CommentConnection { items : [ Comment ] nextToken : String } type Event { # Paginate through all comments belonging to an individual post . comments ( limit : Int , nextToken : String ) : CommentConnection description : String id : ID ! name : String when : String where : String } type EventConnection { items : [ Event ] nextToken : String } type Mutation { # Comment on an event . commentOnEvent ( content : String ! , createdAt : String ! , eventId : ID ! ) : Comment # Create a single event . createEvent ( description : String ! , name : String ! , when : String ! , where : String ! ) : Event # Delete a single event by id . deleteEvent ( id : ID ! ) : Event } type Query { # Get a single event by id . getEvent ( id : ID ! ) : Event # Paginate through events . listEvents ( filter : TableEventFilterInput , limit : Int , nextToken : String ) : EventConnection } type Subscription { subscribeToEventComments ( eventId : String ! ) : Comment } input TableBooleanFilterInput { eq : Boolean ne : Boolean } input TableEventFilterInput { description : TableStringFilterInput id : TableIDFilterInput name : TableStringFilterInput when : TableStringFilterInput where : TableStringFilterInput } input TableFloatFilterInput { between : [ Float ] contains : Float eq : Float ge : Float gt : Float le : Float lt : Float ne : Float notContains : Float } input TableIDFilterInput { beginsWith : ID between : [ ID ] contains : ID eq : ID ge : ID gt : ID le : ID lt : ID ne : ID notContains : ID } input TableIntFilterInput { between : [ Int ] contains : Int eq : Int ge : Int gt : Int le : Int lt : Int ne : Int notContains : Int } input TableStringFilterInput { beginsWith : String between : [ String ] contains : String eq : String ge : String gt : String le : String lt : String ne : String notContains : String }","title":"\u53d6\u5f97\u3057\u305fSchema"},{"location":"hands-on/react/react/#documents","text":"# ./src/graphql/all-operation.graphql # this is an auto generated file. This will be overwritten query GetEvent($id: ID!) { getEvent(id: $id) { comments { nextToken } description id name when where } } query ListEvents( $filter: TableEventFilterInput $limit: Int $nextToken: String ) { listEvents(filter: $filter, limit: $limit, nextToken: $nextToken) { items { description id name when where } nextToken } } mutation CommentOnEvent($content: String!, $createdAt: String!, $eventId: ID!) { commentOnEvent(content: $content, createdAt: $createdAt, eventId: $eventId) { commentId content createdAt eventId } } mutation CreateEvent( $description: String! $name: String! $when: String! $where: String! ) { createEvent( description: $description name: $name when: $when where: $where ) { comments { nextToken } description id name when where } } mutation DeleteEvent($id: ID!) { deleteEvent(id: $id) { comments { nextToken } description id name when where } } subscription SubscribeToEventComments($eventId: String!) { subscribeToEventComments(eventId: $eventId) { commentId content createdAt eventId } }","title":"\u751f\u6210\u3055\u308c\u305fDocuments"},{"location":"hands-on/react/react/#react-custom-hook","text":"// ./ src / graphql / generated . tsx import gql from 'graphql-tag' ; import * as ApolloReactCommon from '@apollo/react-common' ; import * as ApolloReactHooks from '@apollo/react-hooks' ; export type Maybe < T > = T | null ; /** All built - in and custom scalars , mapped to their actual values */ export type Scalars = { ID : string ; String : string ; Boolean : boolean ; Int : number ; Float : number ; }; export type Comment = { __typename ? : 'Comment' ; commentId : Scalars [ 'String' ]; content : Scalars [ 'String' ]; createdAt : Scalars [ 'String' ]; eventId : Scalars [ 'ID' ]; }; export type CommentConnection = { __typename ? : 'CommentConnection' ; items ? : Maybe < Array < Maybe < Comment >>> ; nextToken ? : Maybe < Scalars [ 'String' ] > ; }; export type Event = { __typename ? : 'Event' ; comments ? : Maybe < CommentConnection > ; description ? : Maybe < Scalars [ 'String' ] > ; id : Scalars [ 'ID' ]; name ? : Maybe < Scalars [ 'String' ] > ; when ? : Maybe < Scalars [ 'String' ] > ; where ? : Maybe < Scalars [ 'String' ] > ; }; export type EventCommentsArgs = { limit ? : Maybe < Scalars [ 'Int' ] > ; nextToken ? : Maybe < Scalars [ 'String' ] > ; }; export type EventConnection = { __typename ? : 'EventConnection' ; items ? : Maybe < Array < Maybe < Event >>> ; nextToken ? : Maybe < Scalars [ 'String' ] > ; }; export type Mutation = { __typename ? : 'Mutation' ; commentOnEvent ? : Maybe < Comment > ; createEvent ? : Maybe < Event > ; deleteEvent ? : Maybe < Event > ; }; export type MutationCommentOnEventArgs = { content : Scalars [ 'String' ]; createdAt : Scalars [ 'String' ]; eventId : Scalars [ 'ID' ]; }; export type MutationCreateEventArgs = { description : Scalars [ 'String' ]; name : Scalars [ 'String' ]; when : Scalars [ 'String' ]; where : Scalars [ 'String' ]; }; export type MutationDeleteEventArgs = { id : Scalars [ 'ID' ]; }; export type Query = { __typename ? : 'Query' ; getEvent ? : Maybe < Event > ; listEvents ? : Maybe < EventConnection > ; }; export type QueryGetEventArgs = { id : Scalars [ 'ID' ]; }; export type QueryListEventsArgs = { filter ? : Maybe < TableEventFilterInput > ; limit ? : Maybe < Scalars [ 'Int' ] > ; nextToken ? : Maybe < Scalars [ 'String' ] > ; }; export type Subscription = { __typename ? : 'Subscription' ; subscribeToEventComments ? : Maybe < Comment > ; }; export type SubscriptionSubscribeToEventCommentsArgs = { eventId : Scalars [ 'String' ]; }; export type TableBooleanFilterInput = { eq ? : Maybe < Scalars [ 'Boolean' ] > ; ne ? : Maybe < Scalars [ 'Boolean' ] > ; }; export type TableEventFilterInput = { description ? : Maybe < TableStringFilterInput > ; id ? : Maybe < TableIdFilterInput > ; name ? : Maybe < TableStringFilterInput > ; when ? : Maybe < TableStringFilterInput > ; where ? : Maybe < TableStringFilterInput > ; }; export type TableFloatFilterInput = { between ? : Maybe < Array < Maybe < Scalars [ 'Float' ] >>> ; contains ? : Maybe < Scalars [ 'Float' ] > ; eq ? : Maybe < Scalars [ 'Float' ] > ; ge ? : Maybe < Scalars [ 'Float' ] > ; gt ? : Maybe < Scalars [ 'Float' ] > ; le ? : Maybe < Scalars [ 'Float' ] > ; lt ? : Maybe < Scalars [ 'Float' ] > ; ne ? : Maybe < Scalars [ 'Float' ] > ; notContains ? : Maybe < Scalars [ 'Float' ] > ; }; export type TableIdFilterInput = { beginsWith ? : Maybe < Scalars [ 'ID' ] > ; between ? : Maybe < Array < Maybe < Scalars [ 'ID' ] >>> ; contains ? : Maybe < Scalars [ 'ID' ] > ; eq ? : Maybe < Scalars [ 'ID' ] > ; ge ? : Maybe < Scalars [ 'ID' ] > ; gt ? : Maybe < Scalars [ 'ID' ] > ; le ? : Maybe < Scalars [ 'ID' ] > ; lt ? : Maybe < Scalars [ 'ID' ] > ; ne ? : Maybe < Scalars [ 'ID' ] > ; notContains ? : Maybe < Scalars [ 'ID' ] > ; }; export type TableIntFilterInput = { between ? : Maybe < Array < Maybe < Scalars [ 'Int' ] >>> ; contains ? : Maybe < Scalars [ 'Int' ] > ; eq ? : Maybe < Scalars [ 'Int' ] > ; ge ? : Maybe < Scalars [ 'Int' ] > ; gt ? : Maybe < Scalars [ 'Int' ] > ; le ? : Maybe < Scalars [ 'Int' ] > ; lt ? : Maybe < Scalars [ 'Int' ] > ; ne ? : Maybe < Scalars [ 'Int' ] > ; notContains ? : Maybe < Scalars [ 'Int' ] > ; }; export type TableStringFilterInput = { beginsWith ? : Maybe < Scalars [ 'String' ] > ; between ? : Maybe < Array < Maybe < Scalars [ 'String' ] >>> ; contains ? : Maybe < Scalars [ 'String' ] > ; eq ? : Maybe < Scalars [ 'String' ] > ; ge ? : Maybe < Scalars [ 'String' ] > ; gt ? : Maybe < Scalars [ 'String' ] > ; le ? : Maybe < Scalars [ 'String' ] > ; lt ? : Maybe < Scalars [ 'String' ] > ; ne ? : Maybe < Scalars [ 'String' ] > ; notContains ? : Maybe < Scalars [ 'String' ] > ; }; export type GetEventQueryVariables = { id : Scalars [ 'ID' ]; }; export type GetEventQuery = ( { __typename ? : 'Query' } & { getEvent ? : Maybe < ( { __typename ? : 'Event' } & Pick < Event , 'description' | 'id' | 'name' | 'when' | 'where' > & { comments ? : Maybe < ( { __typename ? : 'CommentConnection' } & Pick < CommentConnection , 'nextToken' > ) > } ) > } ); export type ListEventsQueryVariables = { filter ? : Maybe < TableEventFilterInput > ; limit ? : Maybe < Scalars [ 'Int' ] > ; nextToken ? : Maybe < Scalars [ 'String' ] > ; }; export type ListEventsQuery = ( { __typename ? : 'Query' } & { listEvents ? : Maybe < ( { __typename ? : 'EventConnection' } & Pick < EventConnection , 'nextToken' > & { items ? : Maybe < Array < Maybe < ( { __typename ? : 'Event' } & Pick < Event , 'description' | 'id' | 'name' | 'when' | 'where' > ) >>> } ) > } ); export type CommentOnEventMutationVariables = { content : Scalars [ 'String' ]; createdAt : Scalars [ 'String' ]; eventId : Scalars [ 'ID' ]; }; export type CommentOnEventMutation = ( { __typename ? : 'Mutation' } & { commentOnEvent ? : Maybe < ( { __typename ? : 'Comment' } & Pick < Comment , 'commentId' | 'content' | 'createdAt' | 'eventId' > ) > } ); export type CreateEventMutationVariables = { description : Scalars [ 'String' ]; name : Scalars [ 'String' ]; when : Scalars [ 'String' ]; where : Scalars [ 'String' ]; }; export type CreateEventMutation = ( { __typename ? : 'Mutation' } & { createEvent ? : Maybe < ( { __typename ? : 'Event' } & Pick < Event , 'description' | 'id' | 'name' | 'when' | 'where' > & { comments ? : Maybe < ( { __typename ? : 'CommentConnection' } & Pick < CommentConnection , 'nextToken' > ) > } ) > } ); export type DeleteEventMutationVariables = { id : Scalars [ 'ID' ]; }; export type DeleteEventMutation = ( { __typename ? : 'Mutation' } & { deleteEvent ? : Maybe < ( { __typename ? : 'Event' } & Pick < Event , 'description' | 'id' | 'name' | 'when' | 'where' > & { comments ? : Maybe < ( { __typename ? : 'CommentConnection' } & Pick < CommentConnection , 'nextToken' > ) > } ) > } ); export type SubscribeToEventCommentsSubscriptionVariables = { eventId : Scalars [ 'String' ]; }; export type SubscribeToEventCommentsSubscription = ( { __typename ? : 'Subscription' } & { subscribeToEventComments ? : Maybe < ( { __typename ? : 'Comment' } & Pick < Comment , 'commentId' | 'content' | 'createdAt' | 'eventId' > ) > } ); export const GetEventDocument = gql ` query GetEvent ( $ id : ID ! ) { getEvent ( id : $ id ) { comments { nextToken } description id name when where } } ` ; /** * __useGetEventQuery__ * * To run a query within a React component , call `useGetEventQuery` and pass it any options that fit your needs . * When your component renders , `useGetEventQuery` returns an object from Apollo Client that contains loading , error , and data properties * you can use to render your UI . * * @param baseOptions options that will be passed into the query , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options; * * @example * const { data , loading , error } = useGetEventQuery ({ * variables : { * id : // value for 'id' * }, * }); */ export function useGetEventQuery ( baseOptions ? : ApolloReactHooks . QueryHookOptions < GetEventQuery , GetEventQueryVariables > ) { return ApolloReactHooks . useQuery < GetEventQuery , GetEventQueryVariables > ( GetEventDocument , baseOptions ); } export function useGetEventLazyQuery ( baseOptions ? : ApolloReactHooks . LazyQueryHookOptions < GetEventQuery , GetEventQueryVariables > ) { return ApolloReactHooks . useLazyQuery < GetEventQuery , GetEventQueryVariables > ( GetEventDocument , baseOptions ); } export type GetEventQueryHookResult = ReturnType < typeof useGetEventQuery > ; export type GetEventLazyQueryHookResult = ReturnType < typeof useGetEventLazyQuery > ; export type GetEventQueryResult = ApolloReactCommon . QueryResult < GetEventQuery , GetEventQueryVariables > ; export const ListEventsDocument = gql ` query ListEvents ( $ filter : TableEventFilterInput , $ limit : Int , $ nextToken : String ) { listEvents ( filter : $ filter , limit : $ limit , nextToken : $ nextToken ) { items { description id name when where } nextToken } } ` ; /** * __useListEventsQuery__ * * To run a query within a React component , call `useListEventsQuery` and pass it any options that fit your needs . * When your component renders , `useListEventsQuery` returns an object from Apollo Client that contains loading , error , and data properties * you can use to render your UI . * * @param baseOptions options that will be passed into the query , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options; * * @example * const { data , loading , error } = useListEventsQuery ({ * variables : { * filter : // value for 'filter' * limit : // value for 'limit' * nextToken : // value for 'nextToken' * }, * }); */ export function useListEventsQuery ( baseOptions ? : ApolloReactHooks . QueryHookOptions < ListEventsQuery , ListEventsQueryVariables > ) { return ApolloReactHooks . useQuery < ListEventsQuery , ListEventsQueryVariables > ( ListEventsDocument , baseOptions ); } export function useListEventsLazyQuery ( baseOptions ? : ApolloReactHooks . LazyQueryHookOptions < ListEventsQuery , ListEventsQueryVariables > ) { return ApolloReactHooks . useLazyQuery < ListEventsQuery , ListEventsQueryVariables > ( ListEventsDocument , baseOptions ); } export type ListEventsQueryHookResult = ReturnType < typeof useListEventsQuery > ; export type ListEventsLazyQueryHookResult = ReturnType < typeof useListEventsLazyQuery > ; export type ListEventsQueryResult = ApolloReactCommon . QueryResult < ListEventsQuery , ListEventsQueryVariables > ; export const CommentOnEventDocument = gql ` mutation CommentOnEvent ( $ content : String ! , $ createdAt : String ! , $ eventId : ID ! ) { commentOnEvent ( content : $ content , createdAt : $ createdAt , eventId : $ eventId ) { commentId content createdAt eventId } } ` ; export type CommentOnEventMutationFn = ApolloReactCommon . MutationFunction < CommentOnEventMutation , CommentOnEventMutationVariables > ; /** * __useCommentOnEventMutation__ * * To run a mutation , you first call `useCommentOnEventMutation` within a React component and pass it any options that fit your needs . * When your component renders , `useCommentOnEventMutation` returns a tuple that includes : * - A mutate function that you can call at any time to execute the mutation * - An object with fields that represent the current status of the mutation 's execution * * @param baseOptions options that will be passed into the mutation , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options-2; * * @example * const [ commentOnEventMutation , { data , loading , error }] = useCommentOnEventMutation ({ * variables : { * content : // value for 'content' * createdAt : // value for 'createdAt' * eventId : // value for 'eventId' * }, * }); */ export function useCommentOnEventMutation ( baseOptions ? : ApolloReactHooks . MutationHookOptions < CommentOnEventMutation , CommentOnEventMutationVariables > ) { return ApolloReactHooks . useMutation < CommentOnEventMutation , CommentOnEventMutationVariables > ( CommentOnEventDocument , baseOptions ); } export type CommentOnEventMutationHookResult = ReturnType < typeof useCommentOnEventMutation > ; export type CommentOnEventMutationResult = ApolloReactCommon . MutationResult < CommentOnEventMutation > ; export type CommentOnEventMutationOptions = ApolloReactCommon . BaseMutationOptions < CommentOnEventMutation , CommentOnEventMutationVariables > ; export const CreateEventDocument = gql ` mutation CreateEvent ( $ description : String ! , $ name : String ! , $ when : String ! , $ where : String ! ) { createEvent ( description : $ description , name : $ name , when : $ when , where : $ where ) { comments { nextToken } description id name when where } } ` ; export type CreateEventMutationFn = ApolloReactCommon . MutationFunction < CreateEventMutation , CreateEventMutationVariables > ; /** * __useCreateEventMutation__ * * To run a mutation , you first call `useCreateEventMutation` within a React component and pass it any options that fit your needs . * When your component renders , `useCreateEventMutation` returns a tuple that includes : * - A mutate function that you can call at any time to execute the mutation * - An object with fields that represent the current status of the mutation 's execution * * @param baseOptions options that will be passed into the mutation , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options-2; * * @example * const [ createEventMutation , { data , loading , error }] = useCreateEventMutation ({ * variables : { * description : // value for 'description' * name : // value for 'name' * when : // value for 'when' * where : // value for 'where' * }, * }); */ export function useCreateEventMutation ( baseOptions ? : ApolloReactHooks . MutationHookOptions < CreateEventMutation , CreateEventMutationVariables > ) { return ApolloReactHooks . useMutation < CreateEventMutation , CreateEventMutationVariables > ( CreateEventDocument , baseOptions ); } export type CreateEventMutationHookResult = ReturnType < typeof useCreateEventMutation > ; export type CreateEventMutationResult = ApolloReactCommon . MutationResult < CreateEventMutation > ; export type CreateEventMutationOptions = ApolloReactCommon . BaseMutationOptions < CreateEventMutation , CreateEventMutationVariables > ; export const DeleteEventDocument = gql ` mutation DeleteEvent ( $ id : ID ! ) { deleteEvent ( id : $ id ) { comments { nextToken } description id name when where } } ` ; export type DeleteEventMutationFn = ApolloReactCommon . MutationFunction < DeleteEventMutation , DeleteEventMutationVariables > ; /** * __useDeleteEventMutation__ * * To run a mutation , you first call `useDeleteEventMutation` within a React component and pass it any options that fit your needs . * When your component renders , `useDeleteEventMutation` returns a tuple that includes : * - A mutate function that you can call at any time to execute the mutation * - An object with fields that represent the current status of the mutation 's execution * * @param baseOptions options that will be passed into the mutation , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options-2; * * @example * const [ deleteEventMutation , { data , loading , error }] = useDeleteEventMutation ({ * variables : { * id : // value for 'id' * }, * }); */ export function useDeleteEventMutation ( baseOptions ? : ApolloReactHooks . MutationHookOptions < DeleteEventMutation , DeleteEventMutationVariables > ) { return ApolloReactHooks . useMutation < DeleteEventMutation , DeleteEventMutationVariables > ( DeleteEventDocument , baseOptions ); } export type DeleteEventMutationHookResult = ReturnType < typeof useDeleteEventMutation > ; export type DeleteEventMutationResult = ApolloReactCommon . MutationResult < DeleteEventMutation > ; export type DeleteEventMutationOptions = ApolloReactCommon . BaseMutationOptions < DeleteEventMutation , DeleteEventMutationVariables > ; export const SubscribeToEventCommentsDocument = gql ` subscription SubscribeToEventComments ( $ eventId : String ! ) { subscribeToEventComments ( eventId : $ eventId ) { commentId content createdAt eventId } } ` ; /** * __useSubscribeToEventCommentsSubscription__ * * To run a query within a React component , call `useSubscribeToEventCommentsSubscription` and pass it any options that fit your needs . * When your component renders , `useSubscribeToEventCommentsSubscription` returns an object from Apollo Client that contains loading , error , and data properties * you can use to render your UI . * * @param baseOptions options that will be passed into the subscription , supported options are listed on : https : // www . apollographql . com / docs / react / api / react - hooks / #options; * * @example * const { data , loading , error } = useSubscribeToEventCommentsSubscription ({ * variables : { * eventId : // value for 'eventId' * }, * }); */ export function useSubscribeToEventCommentsSubscription ( baseOptions ? : ApolloReactHooks . SubscriptionHookOptions < SubscribeToEventCommentsSubscription , SubscribeToEventCommentsSubscriptionVariables > ) { return ApolloReactHooks . useSubscription < SubscribeToEventCommentsSubscription , SubscribeToEventCommentsSubscriptionVariables > ( SubscribeToEventCommentsDocument , baseOptions ); } export type SubscribeToEventCommentsSubscriptionHookResult = ReturnType < typeof useSubscribeToEventCommentsSubscription > ; export type SubscribeToEventCommentsSubscriptionResult = ApolloReactCommon . SubscriptionResult < SubscribeToEventCommentsSubscription > ;","title":"\u751f\u6210\u3055\u308c\u305f\u578b\u3068React Custom Hook"},{"location":"setup/cloud9/","text":"Cloud9\u306b\u3088\u308b\u74b0\u5883\u306e\u6e96\u5099 Cloud9\u3068\u306f AWS\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30af\u30e9\u30a6\u30c9\u4e0a\u3067\u52d5\u304f\uff64\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u74b0\u5883\u3067\u3059\uff61 \u30b3\u30fc\u30c9\u30a8\u30c7\u30a3\u30bf\u3068\u958b\u767a\u74b0\u5883\u304cWeb\u4e0a\u304b\u3089\u4f7f\u3048\u307e\u3059\uff61 AWS CLI\u3068AWS SAM CLI\u306a\u3069AWS\u3092\u4f7f\u3063\u305f\u958b\u767a\u306b\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u3084\u57fa\u672c\u7684\u306a\u8a00\u8a9e\u74b0\u5883\u304c \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u3067\u3059\uff61 AWS Cloud9\uff08Cloud IDE \u3067\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3001\u5b9f\u884c\u3001\u30c7\u30d0\u30c3\u30b0\uff09| AWS \u306a\u305c\u4eca\u56deCloud9\u3092\u4f7f\u3046\u304b \u6700\u521d\u304b\u3089AWS\u3092\u4f7f\u3063\u305f\u958b\u767a\u306b\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b \u74b0\u5883\u306e\u6e96\u5099\u3068\u3044\u3046\u672c\u8cea\u7684\u3067\u306a\u3044\u6240\u3067\u3064\u307e\u3065\u3044\u3066\u6b32\u3057\u304f\u306a\u3044 \u30cf\u30f3\u30ba\u30aa\u30f3\u306e\u6027\u8cea\u4e0a\u30ed\u30fc\u30ab\u30eb\u30de\u30b7\u30f3\u3092\u7d71\u4e00\u3067\u304d\u306a\u3044 \u5f0a\u793e\u3068\u306f\u7121\u95a2\u4fc2\u3067\u3059\u304c\uff64\u5b9f\u969b\u306e\u958b\u767a\u73fe\u5834\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u4f8b\u3082\u3042\u308a\u307e\u3059\uff61 \u30e6\u30fc\u30b6\u30fc\u4f01\u696d\u306b\u304a\u3051\u308b\u30b5\u30fc\u30d0\u30ec\u30b9\u30b7\u30b9\u30c6\u30e0\u3078\u306e\u79fb\u884c/JAWS DAYS2018 Cloud9 Environment\u306e\u4f5c\u6210 Warning \u30de\u30cd\u30b8\u30e1\u30f3\u30c8\u30b3\u30f3\u30bd\u30fc\u30eb\u306e\u53f3\u4e0a\u3067\uff64 \u30ea\u30fc\u30b8\u30e7\u30f3\u304c \u6771\u4eac(ap-northeast-1) \u306b\u306a\u3063\u3066\u3044\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff61 Info Safari\u3067Cloud9\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\uff64 \u30b5\u30a4\u30c8\u8d8a\u3048\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u3092\u9632\u3050 \u3068 \u3059\u3079\u3066\u306eCookie\u3092\u30d6\u30ed\u30c3\u30af \u3092\u7121\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff61 Mac \u306e Safari \u3067 Cookie \u3068 Web \u30b5\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b AWS Cloud9 \u3092\u958b\u304f Create environment \u3092\u9078\u629e\u3057\u307e\u3059\uff61 \u74b0\u5883\u3092\u8a2d\u5b9a\u3057\uff64 Next step \u3092\u9078\u629e\u3057\u307e\u3059\uff61 Name: hands-on Description: \u4f55\u3082\u5165\u529b\u3057\u306a\u3044 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u306e\u307e\u307e\uff64 Next step \u3092\u9078\u629e\u3057\u307e\u3059\uff61 Environment type: Create a new instance for environment (EC2) Instance type: t2.micro (1 GiB RAM + 1 vCPU) Platform: Amazon Linux Cost-saving setting: Afrer 30minutes(default) IAM role: AWSServiceRoleForAWSCloud9 \u8a2d\u5b9a\u3092\u78ba\u8a8d\u3057\uff64 Create environment \u3092\u9078\u629e\u3057\u307e\u3059\uff61 Cloud9\u304c\u8d77\u52d5\u3057\u307e\u3059\uff61 Info Cloud9\u3092\u958b\u3044\u3066\u3044\u308b\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u3066\u3057\u307e\u3063\u305f\u5834\u5408\u306f\uff64\u518d\u5ea6 AWS Cloud9 \u3092\u958b\u304d\uff64 hands-on \u306e Open IDE \u3092\u9078\u629e\u3057\u307e\u3059\uff61 nodenv(anyenv)\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u591a\u8a00\u8a9e\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u958b\u767a\u74b0\u5883\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u30c4\u30fc\u30eb anyenv \u3092\u4f7f\u3063\u3066\u3001Node.js\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u30c4\u30fc\u30eb nodenv \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e \u672c\u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u306f\u3001\u73fe\u6642\u70b9\u3067\u306eNode.js LTS\u7248\u306e 12.16.3 \u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e git clone https://github.com/anyenv/anyenv ~/.anyenv echo 'export PATH=\" $HOME /.anyenv/bin: $PATH \"' >> ~/.bash_profile echo 'eval \"$(anyenv init -)\"' >> ~/.bash_profile ~/.anyenv/bin/anyenv init exec $SHELL -l anyenv install --init anyenv install nodenv exec $SHELL -l NODE_VERSION=12.16.3 nodenv install ${ NODE_VERSION } nodenv global ${ NODE_VERSION } exec $SHELL -l \u9014\u4e2d\u3067\u4f55\u56de\u304b\u5b9f\u884c\u3057\u3066\u3044\u308b exec $SHELL -l \u306f\u30b7\u30a7\u30eb\u3092\u518d\u8aad\u307f\u8fbc\u307f\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3067\u3059\uff0e AWS\u30ea\u30fc\u30b8\u30e7\u30f3\u306e\u8a2d\u5b9a \u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u306fAWS CLI\u3092\u4f7f\u3044\uff64\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067AWS\u3092\u64cd\u4f5c\u3057\u307e\u3059\uff61 \u5229\u7528\u3059\u308bAWS\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u70ba\u306b\uff64\u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff61 echo 'AWS_DEFAULT_REGION=\"ap-northeast-1\"' >> ~/.bashrc source ~/.bashrc \u8a2d\u5b9a\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff61 echo ${ AWS_DEFAULT_REGION } aws ec2 describe-instances --query \\ 'sort_by(Reservations[].Instances[].{Tags:Tags[?Key==`Name`].Value|[0],InstanceType:InstanceType,State:State.Name},&Tags)' --output table (\u4f8b) ap-northeast-1 ----------------------------------------------------------------------------------------- | DescribeInstances | +--------------+----------+-------------------------------------------------------------+ | InstanceType | State | Tags | +--------------+----------+-------------------------------------------------------------+ | t2.micro | running | aws-cloud9-hands-on-[Random alphanumeric] | +--------------+----------+-------------------------------------------------------------+","title":"\u74b0\u5883\u69cb\u7bc9"},{"location":"setup/cloud9/#cloud9","text":"","title":"Cloud9\u306b\u3088\u308b\u74b0\u5883\u306e\u6e96\u5099"},{"location":"setup/cloud9/#cloud9_1","text":"AWS\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30af\u30e9\u30a6\u30c9\u4e0a\u3067\u52d5\u304f\uff64\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u74b0\u5883\u3067\u3059\uff61 \u30b3\u30fc\u30c9\u30a8\u30c7\u30a3\u30bf\u3068\u958b\u767a\u74b0\u5883\u304cWeb\u4e0a\u304b\u3089\u4f7f\u3048\u307e\u3059\uff61 AWS CLI\u3068AWS SAM CLI\u306a\u3069AWS\u3092\u4f7f\u3063\u305f\u958b\u767a\u306b\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u3084\u57fa\u672c\u7684\u306a\u8a00\u8a9e\u74b0\u5883\u304c \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u3067\u3059\uff61 AWS Cloud9\uff08Cloud IDE \u3067\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3001\u5b9f\u884c\u3001\u30c7\u30d0\u30c3\u30b0\uff09| AWS","title":"Cloud9\u3068\u306f"},{"location":"setup/cloud9/#cloud9_2","text":"\u6700\u521d\u304b\u3089AWS\u3092\u4f7f\u3063\u305f\u958b\u767a\u306b\u5fc5\u8981\u306a\u30c4\u30fc\u30eb\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b \u74b0\u5883\u306e\u6e96\u5099\u3068\u3044\u3046\u672c\u8cea\u7684\u3067\u306a\u3044\u6240\u3067\u3064\u307e\u3065\u3044\u3066\u6b32\u3057\u304f\u306a\u3044 \u30cf\u30f3\u30ba\u30aa\u30f3\u306e\u6027\u8cea\u4e0a\u30ed\u30fc\u30ab\u30eb\u30de\u30b7\u30f3\u3092\u7d71\u4e00\u3067\u304d\u306a\u3044 \u5f0a\u793e\u3068\u306f\u7121\u95a2\u4fc2\u3067\u3059\u304c\uff64\u5b9f\u969b\u306e\u958b\u767a\u73fe\u5834\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u4f8b\u3082\u3042\u308a\u307e\u3059\uff61 \u30e6\u30fc\u30b6\u30fc\u4f01\u696d\u306b\u304a\u3051\u308b\u30b5\u30fc\u30d0\u30ec\u30b9\u30b7\u30b9\u30c6\u30e0\u3078\u306e\u79fb\u884c/JAWS DAYS2018","title":"\u306a\u305c\u4eca\u56deCloud9\u3092\u4f7f\u3046\u304b"},{"location":"setup/cloud9/#cloud9-environment","text":"Warning \u30de\u30cd\u30b8\u30e1\u30f3\u30c8\u30b3\u30f3\u30bd\u30fc\u30eb\u306e\u53f3\u4e0a\u3067\uff64 \u30ea\u30fc\u30b8\u30e7\u30f3\u304c \u6771\u4eac(ap-northeast-1) \u306b\u306a\u3063\u3066\u3044\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff61 Info Safari\u3067Cloud9\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\uff64 \u30b5\u30a4\u30c8\u8d8a\u3048\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u3092\u9632\u3050 \u3068 \u3059\u3079\u3066\u306eCookie\u3092\u30d6\u30ed\u30c3\u30af \u3092\u7121\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff61 Mac \u306e Safari \u3067 Cookie \u3068 Web \u30b5\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b AWS Cloud9 \u3092\u958b\u304f Create environment \u3092\u9078\u629e\u3057\u307e\u3059\uff61 \u74b0\u5883\u3092\u8a2d\u5b9a\u3057\uff64 Next step \u3092\u9078\u629e\u3057\u307e\u3059\uff61 Name: hands-on Description: \u4f55\u3082\u5165\u529b\u3057\u306a\u3044 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u306e\u307e\u307e\uff64 Next step \u3092\u9078\u629e\u3057\u307e\u3059\uff61 Environment type: Create a new instance for environment (EC2) Instance type: t2.micro (1 GiB RAM + 1 vCPU) Platform: Amazon Linux Cost-saving setting: Afrer 30minutes(default) IAM role: AWSServiceRoleForAWSCloud9 \u8a2d\u5b9a\u3092\u78ba\u8a8d\u3057\uff64 Create environment \u3092\u9078\u629e\u3057\u307e\u3059\uff61 Cloud9\u304c\u8d77\u52d5\u3057\u307e\u3059\uff61 Info Cloud9\u3092\u958b\u3044\u3066\u3044\u308b\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u3066\u3057\u307e\u3063\u305f\u5834\u5408\u306f\uff64\u518d\u5ea6 AWS Cloud9 \u3092\u958b\u304d\uff64 hands-on \u306e Open IDE \u3092\u9078\u629e\u3057\u307e\u3059\uff61","title":"Cloud9 Environment\u306e\u4f5c\u6210"},{"location":"setup/cloud9/#nodenvanyenv","text":"\u591a\u8a00\u8a9e\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u958b\u767a\u74b0\u5883\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u30c4\u30fc\u30eb anyenv \u3092\u4f7f\u3063\u3066\u3001Node.js\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u30c4\u30fc\u30eb nodenv \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e \u672c\u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u306f\u3001\u73fe\u6642\u70b9\u3067\u306eNode.js LTS\u7248\u306e 12.16.3 \u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e git clone https://github.com/anyenv/anyenv ~/.anyenv echo 'export PATH=\" $HOME /.anyenv/bin: $PATH \"' >> ~/.bash_profile echo 'eval \"$(anyenv init -)\"' >> ~/.bash_profile ~/.anyenv/bin/anyenv init exec $SHELL -l anyenv install --init anyenv install nodenv exec $SHELL -l NODE_VERSION=12.16.3 nodenv install ${ NODE_VERSION } nodenv global ${ NODE_VERSION } exec $SHELL -l \u9014\u4e2d\u3067\u4f55\u56de\u304b\u5b9f\u884c\u3057\u3066\u3044\u308b exec $SHELL -l \u306f\u30b7\u30a7\u30eb\u3092\u518d\u8aad\u307f\u8fbc\u307f\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3067\u3059\uff0e","title":"nodenv(anyenv)\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"setup/cloud9/#aws","text":"\u30cf\u30f3\u30ba\u30aa\u30f3\u3067\u306fAWS CLI\u3092\u4f7f\u3044\uff64\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067AWS\u3092\u64cd\u4f5c\u3057\u307e\u3059\uff61 \u5229\u7528\u3059\u308bAWS\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u70ba\u306b\uff64\u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff61 echo 'AWS_DEFAULT_REGION=\"ap-northeast-1\"' >> ~/.bashrc source ~/.bashrc \u8a2d\u5b9a\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff61 echo ${ AWS_DEFAULT_REGION } aws ec2 describe-instances --query \\ 'sort_by(Reservations[].Instances[].{Tags:Tags[?Key==`Name`].Value|[0],InstanceType:InstanceType,State:State.Name},&Tags)' --output table (\u4f8b) ap-northeast-1 ----------------------------------------------------------------------------------------- | DescribeInstances | +--------------+----------+-------------------------------------------------------------+ | InstanceType | State | Tags | +--------------+----------+-------------------------------------------------------------+ | t2.micro | running | aws-cloud9-hands-on-[Random alphanumeric] | +--------------+----------+-------------------------------------------------------------+","title":"AWS\u30ea\u30fc\u30b8\u30e7\u30f3\u306e\u8a2d\u5b9a"}]}